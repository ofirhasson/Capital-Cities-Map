{"version":3,"file":"static/js/42723.b3c50576.chunk.js","mappings":";yIAAA,MAAMA,EACFC,WAAAA,GACIC,KAAKC,gBAAkB,IAAIC,IAC3BF,KAAKG,gCAAkC,CACnCC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,aAAc,cAE1B,CACI,QAAIC,GACA,MAAO,QACf,CACIC,MAAAA,CAAOC,GACH,OAAO,IAAIC,KAAKD,EACxB,CACIE,QAAAA,CAASF,GAEL,OAAO,IAAIC,KAAKD,EAAKG,UADF,MAE3B,CACIC,qBAAAA,CAAsBJ,GAClB,MAAMN,EAAOM,EAAKK,cACZV,EAAQK,EAAKM,WAAa,EAC1BV,EAAMI,EAAKO,UACjB,MAAO,GAAPC,OAAUd,EAAI,KAAAc,OAAIb,EAAMc,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIZ,EAClDa,WACAC,SAAS,EAAG,KACzB,CACIC,aAAAA,CAAcC,EAASC,GACnB,MAAMb,EAAOV,KAAKwB,QAAQF,GAEpBG,EADYzB,KAAK0B,cAAcH,GACbI,cAAcjB,IAC/BkB,GAAUH,EACZI,QAAOC,IAAA,IAAC,KAAEC,GAAMD,EAAA,MAAc,iBAATC,CAAuB,IAC5CC,KAAIC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,CAAK,IACvBC,EAAWnC,KAAKoC,yBAAyBR,GACzCS,EAAkB3B,EAAK4B,cAAgB5B,EAAK6B,oBAAsBJ,GAExE,OADAzB,EAAK8B,WAAWH,GACT3B,CACf,CACI+B,IAAAA,CAAKC,EAAOC,GACR,OAAOD,EAAM7B,YAAc8B,EAAM9B,SACzC,CACIW,OAAAA,CAAQF,GACJ,OAAO,IAAIX,KAAKW,EACxB,CACII,aAAAA,CAAcH,GACV,IAAIqB,EAAY5C,KAAKC,gBAAgB4C,IAAItB,GAQzC,OAPKqB,IACDA,EAAY,IAAIE,KAAKC,eAAe,QAAS,CACzCC,SAAUzB,KACPvB,KAAKG,kCAEZH,KAAKC,gBAAgBgD,IAAI1B,EAAIqB,IAE1BA,CACf,CACIR,wBAAAA,CAAyBc,GACrB,MAAOC,KAASC,GAAgBF,EAAYG,MAAM,IAC3CC,EAAOC,GAAWH,EAAaI,KAAK,IAAIC,MAAM,KAErD,OADgC,MAATN,EAAe,GAAK,IACF,GAAhBO,OAAOJ,GAAcI,OAAOH,GAAW,GACxE","sources":["../node_modules/@esri/calcite-components/node_modules/timezone-groups/dist/strategy/native/index.js"],"sourcesContent":["class NativeDateEngine {\n    constructor() {\n        this._formatterCache = new Map();\n        this._commonDateTimeFormatterOptions = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            timeZoneName: 'shortOffset',\n        };\n    }\n    get name() {\n        return 'native';\n    }\n    create(date) {\n        return new Date(date);\n    }\n    increase(date) {\n        const oneDayInMs = 86400000;\n        return new Date(date.getTime() + oneDayInMs);\n    }\n    formatToIsoDateString(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${year}-${month.toString().padStart(2, '0')}-${day\n            .toString()\n            .padStart(2, '0')}`;\n    }\n    isoToTimeZone(isoDate, tz) {\n        const date = this._toDate(isoDate);\n        const formatter = this._getFormatter(tz);\n        const parts = formatter.formatToParts(date);\n        const [offset] = parts\n            .filter(({ type }) => type === 'timeZoneName')\n            .map(({ value }) => value);\n        const tzOffset = this._getTimeZoneOffsetInMins(offset);\n        const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);\n        date.setMinutes(tzOffsetMinutes);\n        return date;\n    }\n    same(date1, date2) {\n        return date1.getTime() === date2.getTime();\n    }\n    _toDate(isoDate) {\n        return new Date(isoDate);\n    }\n    _getFormatter(tz) {\n        let formatter = this._formatterCache.get(tz);\n        if (!formatter) {\n            formatter = new Intl.DateTimeFormat('en-US', {\n                timeZone: tz,\n                ...this._commonDateTimeFormatterOptions,\n            });\n            this._formatterCache.set(tz, formatter);\n        }\n        return formatter;\n    }\n    _getTimeZoneOffsetInMins(gmtTimeZone) {\n        const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);\n        const [hours, minutes] = hoursMinutes.join('').split(':');\n        const signMultiplier = sign === '+' ? 1 : -1;\n        return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));\n    }\n}\n\nexport { NativeDateEngine as DateEngine };\n"],"names":["NativeDateEngine","constructor","this","_formatterCache","Map","_commonDateTimeFormatterOptions","year","month","day","timeZoneName","name","create","date","Date","increase","getTime","formatToIsoDateString","getFullYear","getMonth","getDate","concat","toString","padStart","isoToTimeZone","isoDate","tz","_toDate","parts","_getFormatter","formatToParts","offset","filter","_ref","type","map","_ref2","value","tzOffset","_getTimeZoneOffsetInMins","tzOffsetMinutes","getMinutes","getTimezoneOffset","setMinutes","same","date1","date2","formatter","get","Intl","DateTimeFormat","timeZone","set","gmtTimeZone","sign","hoursMinutes","slice","hours","minutes","join","split","Number"],"sourceRoot":""}