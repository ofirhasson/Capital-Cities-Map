{"version":3,"file":"static/js/96734.466296d0.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.tsx"],"sourcesContent":["import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZoneItem, TimeZoneMode, TimeZoneName } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZoneName, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\n/**\n * The lazy-loaded timezone-groups lib to be used across instances.\n */\nlet timeZoneGroups: Promise<[any, any]>;\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[]> {\n  const referenceDateInMs: number = referenceDate.getTime();\n  const timeZoneNames = Intl.supportedValuesOf(\"timeZone\");\n\n  if (mode === \"offset\") {\n    if (!timeZoneGroups) {\n      timeZoneGroups = Promise.all([\n        import(\"timezone-groups/dist/index.js\"),\n        import(\"timezone-groups/dist/strategy/native/index.js\"),\n      ]);\n    }\n\n    return timeZoneGroups.then(async ([{ groupTimeZones }, { DateEngine }]) => {\n      const timeZoneGroups: { labelTzIndices: number[]; tzs: TimeZoneName[] }[] = await groupTimeZones({\n        dateEngine: new DateEngine(),\n        groupDateRange: 1,\n        startDate: new Date(referenceDateInMs).toISOString(),\n      });\n\n      const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n      // we remove blocked entries from tzs and adjust label indices accordingly\n      timeZoneGroups.forEach((group) => {\n        const indexOffsets: number[] = [];\n        let removedSoFar = 0;\n\n        group.tzs.forEach((tz, index) => {\n          if (timeZoneNameBlockList.includes(tz)) {\n            removedSoFar++;\n          }\n          indexOffsets[index] = removedSoFar;\n        });\n\n        group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n        group.labelTzIndices = group.labelTzIndices\n          .map((index) => index - indexOffsets[index])\n          .filter((index) => index >= 0 && index < group.tzs.length);\n      });\n\n      const effectiveLocale =\n        standardTime === \"user\"\n          ? locale\n          : // we use locales that will always yield a short offset that matches `standardTime`\n            standardTime === \"utc\"\n            ? \"fr\"\n            : \"en-GB\";\n\n      return timeZoneGroups\n        .map<TimeZoneItem<number>>(({ labelTzIndices, tzs }) => {\n          const groupRepTz = tzs[0];\n          const decimalOffset = timeZoneOffsetToDecimal(\n            getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n          );\n          const value = toOffsetValue(groupRepTz, referenceDateInMs);\n          const tzLabels = labelTzIndices.map((index: number) => {\n            const timeZone = tzs[index];\n            const timeZoneLabel = messages[timeZone];\n            return (\n              timeZoneLabel ||\n              // get city token\n              timeZone.split(\"/\").pop()\n            );\n          });\n\n          const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n          return {\n            label,\n            value,\n            filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n          };\n        })\n        .filter((group) => !!group)\n        .sort((groupA, groupB) => groupA.value - groupB.value);\n    });\n  }\n\n  return timeZoneNames\n    .map<TimeZoneItem<string>>((timeZone) => {\n      const label = toUserFriendlyName(timeZone);\n      const value = timeZone;\n\n      return {\n        label,\n        value,\n        filterValue: timeZone,\n      };\n    })\n    .filter((group) => !!group)\n    .sort();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZoneName,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : timeZoneItems.find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZoneItem, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value && this.clearable) {\n      this.value = value;\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.textLabel);\n\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    return value === null ? \"\" : value;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\" ? this.messages.namePlaceholder : this.messages.offsetPlaceholder\n            }\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.timeZoneItems.map((group) => {\n              const selected = this.selectedTimeZoneItem === group;\n              const { label, value } = group;\n\n              return (\n                <calcite-combobox-item\n                  data-value={value}\n                  key={label}\n                  selected={selected}\n                  textLabel={label}\n                  value={`${group.filterValue}`}\n                />\n              );\n            })}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],"names":["hourToMinutes","timeZoneNameBlockList","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","replace","timeZoneGroups","async","createTimeZoneItems","locale","messages","mode","referenceDate","standardTime","referenceDateInMs","getTime","timeZoneNames","Intl","supportedValuesOf","Promise","all","then","groupTimeZones","DateEngine","_ref","dateEngine","groupDateRange","startDate","Date","toISOString","listFormatter","ListFormat","style","type","forEach","group","indexOffsets","removedSoFar","tzs","tz","index","includes","filter","labelTzIndices","map","length","effectiveLocale","_ref2","groupRepTz","decimalOffset","getTimeZoneShortOffset","value","timeZoneName","offset","Number","toOffsetValue","tzLabels","timeZone","split","pop","label","offsetLabel","groupLabel","timeZoneLabel","createTimeZoneOffsetLabel","format","filterValue","toUserFriendlyName","sort","groupA","groupB","arguments","undefined","now","getDateTimeFormat","formatToParts","find","_ref3","findTimeZoneItemByProp","timeZoneItems","prop","valueToMatch","item","InputTimeZone","proxyCustomElement","HTMLElement","setComboboxRef","el","this","comboboxEl","onComboboxBeforeClose","event","stopPropagation","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","selectedItem","target","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","textLabel","selectedValue","concat","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItemsAndSelection","handleValueChange","oldValue","normalizeValue","clearable","timeZoneItem","findTimeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","onLabelClick","_this$value","fallbackValue","getTimezoneOffset","DateTimeFormat","resolvedOptions","_this$referenceDate","offsetStyle","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","key","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","readOnly","ref","scale","selectionMode","status","validationIcon","validationMessage","HiddenFormInputSlot","component"],"sourceRoot":""}