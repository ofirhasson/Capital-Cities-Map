{"version":3,"file":"static/js/19790.048497f4.chunk.js","mappings":";gMAAA,MCQaA,GAAMC,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,qJA4DT,KAAAC,kBAAqCC,EAAAA,EAAAA,GAAe,YAAY,KACtEC,KAAKC,kCACLD,KAAKE,4BAA4BC,MAAM,mBAjD9B,2DA0BDC,gBAAAA,CAAiBC,EAAgBC,EAAgBC,GACxC,UAAbA,GAAqC,UAAbA,GAC1BP,KAAKC,kCAGPD,KAAKE,4BAA4BC,OAuC3BF,+BAAAA,GACN,MACEO,IAAI,YAAEC,GAAa,mBACnBC,EAAkB,mBAClBC,EAAkB,MAClBC,EAAK,MACLC,GACEb,KAECY,GAASA,IAAUF,IACtBV,KAAKY,MAAQH,EACbT,KAAKU,mBAAqBD,GAIjB,MAATI,GACAA,IAAUF,IAEVX,KAAKa,MAAQJ,EACbT,KAAKW,mBAAqBF,GAU9BK,iBAAAA,GAAiB,IAAAC,EACff,KAAKC,kCACgB,QAArBc,EAAAf,KAAKF,wBAAgB,IAAAiB,GAArBA,EAAuBC,QAAQhB,KAAKQ,GAAI,CACtCS,gBAAiB,CAAC,QAAS,SAC3BC,eAAe,EACfC,WAAW,EACXC,SAAS,IAIbC,oBAAAA,GAAoB,IAAAC,EACG,QAArBA,EAAAtB,KAAKF,wBAAgB,IAAAwB,GAArBA,EAAuBC,aASzBC,MAAAA,GACE,OAAOC,EAAAA,EAAAA,GAAA,QAAAC,IAAA,4CAAO1B,KAAKY,qMD7IL,2gBE+CFb,EACd4B,EACAC,EACAC,GAEA,KAAKC,EAAAA,EAAAA,KACH,OAGF,MAAMC,EAIR,SAA6CJ,GAE3C,MAAMK,UAAiCC,OAAOC,iBAQ5CC,WAAAA,CAAYP,GACVQ,MAAMR,GARA,KAAAS,cAGH,GAMHrC,KAAK4B,SAAWA,EAGlBZ,OAAAA,CAAQsB,EAAcT,GAGpB,OAFA7B,KAAKqC,cAAcE,KAAK,CAAED,SAAQT,YAE3BO,MAAMpB,QAAQsB,EAAQT,GAG/BW,SAAAA,CAAUF,GACR,MAAMG,EAAqBzC,KAAKqC,cAAcK,QAAQC,GAAaA,EAASL,SAAWA,IACvFtC,KAAKqC,cAAgB,GACrBrC,KAAK4B,SAASQ,MAAMQ,cAAe5C,MACnCA,KAAKuB,aACLkB,EAAmBI,SAASF,GAAa3C,KAAKgB,QAAQ2B,EAASL,OAAQK,EAASd,YAIpF,MAEa,iBAATF,EACIM,OAAOa,qBACE,aAATnB,EACEK,EACAC,OAAOc,cAGnB,CA3CmBC,CAAerB,GAChC,OAAO,IAAII,EAASH,EAAiBC,EACvC","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/option/option.scss?tag=calcite-option&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/option/option.tsx","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts"],"sourcesContent":[":host {\n  @apply block;\n}\n\n@include base-component();\n","import { Component, Element, Event, EventEmitter, h, Prop, VNode, Watch } from \"@stencil/core\";\nimport { createObserver } from \"../../utils/observers\";\n\n@Component({\n  tag: \"calcite-option\",\n  styleUrl: \"option.scss\",\n  shadow: true,\n})\nexport class Option {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({\n    reflect: true,\n  })\n  disabled = false;\n\n  /**\n   * Accessible name for the component.\n   */\n  @Prop({ mutable: true })\n  label: string;\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({\n    reflect: true,\n  })\n  selected: boolean;\n\n  /**\n   * The component's value.\n   */\n  @Prop({ mutable: true })\n  value: any;\n\n  @Watch(\"disabled\")\n  @Watch(\"label\")\n  @Watch(\"selected\")\n  @Watch(\"value\")\n  protected handlePropChange(_newValue: any, _oldValue: any, propName: string): void {\n    if (propName === \"label\" || propName === \"value\") {\n      this.ensureTextContentDependentProps();\n    }\n\n    this.calciteInternalOptionChange.emit();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Variables\n  //\n  //--------------------------------------------------------------------------\n\n  @Element()\n  private el: HTMLCalciteOptionElement;\n\n  private internallySetLabel: string;\n\n  private internallySetValue: any;\n\n  private mutationObserver: MutationObserver = createObserver(\"mutation\", () => {\n    this.ensureTextContentDependentProps();\n    this.calciteInternalOptionChange.emit();\n  });\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  private calciteInternalOptionChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private ensureTextContentDependentProps(): void {\n    const {\n      el: { textContent },\n      internallySetLabel,\n      internallySetValue,\n      label,\n      value,\n    } = this;\n\n    if (!label || label === internallySetLabel) {\n      this.label = textContent;\n      this.internallySetLabel = textContent;\n    }\n\n    if (\n      value == null /* intentional loose equals to handle both undefined & null */ ||\n      value === internallySetValue\n    ) {\n      this.value = textContent;\n      this.internallySetValue = textContent;\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.ensureTextContentDependentProps();\n    this.mutationObserver?.observe(this.el, {\n      attributeFilter: [\"label\", \"value\"],\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    return <slot>{this.label}</slot>;\n  }\n}\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["Option","proxyCustomElement","HTMLElement","mutationObserver","createObserver","this","ensureTextContentDependentProps","calciteInternalOptionChange","emit","handlePropChange","_newValue","_oldValue","propName","el","textContent","internallySetLabel","internallySetValue","label","value","connectedCallback","_this$mutationObserve","observe","attributeFilter","characterData","childList","subtree","disconnectedCallback","_this$mutationObserve2","disconnect","render","h","key","type","callback","options","isBrowser","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","forEach","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}