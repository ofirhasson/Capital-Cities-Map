{"version":3,"file":"static/js/93090.6ce8c74d.chunk.js","mappings":";wQAAO,MAAMA,EACF,UADEA,EAEH,SAGGC,EACE,eADFA,EAEF,UAFEA,EAGA,cAHAA,EAIF,YAJEA,EAKF,UALEA,EAMI,iBANJA,EAOQ,uBAPRA,EAQC,cARDA,EASH,SATGA,EAUH,SAVGA,EAWG,iBAXHA,EAYM,mBAZNA,EAaU,0BAbVA,EAcO,uBAdPA,EAeJ,QAGIC,EAAQ,CACnBC,SAAU,aACVC,WAAY,eACZC,MAAO,eACPC,QAAS,6BCiBEC,GAAYC,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,iJA+GvB,KAAAC,oBAAuBC,KACjBC,EAAAA,EAAAA,GAAgBD,EAAME,OACxBC,KAAKC,gBACLJ,EAAMK,iBACNL,EAAMM,oBAIV,KAAAF,cAAgB,KACdD,KAAKI,MAAQJ,KAAKI,KAClBJ,KAAKK,0BAA0BC,MAAM,+EAtGQ,yDAqBqB,mHAiBpEC,gBAAAA,IAeA,cAAMC,SACEC,EAAAA,EAAAA,GAAmBT,OACzBU,EAAAA,EAAAA,GAAmBV,KAAKW,IAc1BC,qBAAAA,IACEC,EAAAA,EAAAA,GAAeb,KAAMA,KAAKc,iBAyC5BC,iBAAAA,IACEC,EAAAA,EAAAA,GAAiBhB,OACjBiB,EAAAA,EAAAA,GAAgBjB,MAGlB,uBAAMkB,SACEC,EAAAA,EAAAA,GAAcnB,OACpBoB,EAAAA,EAAAA,GAAuBpB,MAGzBqB,gBAAAA,IACEC,EAAAA,EAAAA,GAAmBtB,MAGrBuB,oBAAAA,IACEC,EAAAA,EAAAA,GAAoBxB,OACpByB,EAAAA,EAAAA,GAAmBzB,MAQrB0B,gBAAAA,GAAgB,IAAAC,EACd,MAAM,OAAEC,GAAW5B,KACb6B,EAA0B,QAAhBF,EAAGvC,EAAMwC,UAAO,IAAAD,GAAAA,EAC1BG,EAAoB,CACxB,CAAC3C,IAAiB,EAClB,CAACA,GAAsB,SAAVyC,EACb,CAACzC,GAAwB,WAAVyC,GAGjB,OAAOC,GACLE,EAAAA,EAAAA,GAAA,gBAAcC,MAAOF,EAAmBG,KAAMJ,EAAYK,MAAM,MAC9D,KAGNC,UAAAA,CAAWF,GACT,MAAM,YAAEG,GAAgBpC,KAExB,QAAaqC,IAATJ,EACF,OAAO,KAGT,MAAMK,EAA+B,SAAhBF,GAA0C,UAAhBA,EACzCG,EAA6B,SAAhBH,GAA0C,QAAhBA,EAEvCI,EAAcP,IAASjC,KAAKyC,UAGlC,OACEV,EAAAA,EAAAA,GAAA,gBACEC,MAAOQ,EAAcrD,EAAgBA,EACrCuD,QAASF,EAAcF,EAAeC,EACtCN,KAAMO,EAAcxC,KAAKyC,UAAYzC,KAAK2C,QAC1C5C,IAAKyC,EAAcxC,KAAKyC,UAAYzC,KAAK2C,QACzCT,MAAM,MAKZU,MAAAA,GACE,MAAM,SAAEC,EAAQ,KAAEzC,EAAI,KAAE0C,EAAI,cAAEC,GAAkB/C,KAC1CgD,EAAY5C,EAAOhB,EAAMC,SAAWD,EAAME,WAE1C2D,EAAc7C,EAAOyC,EAASK,SAAWL,EAASM,OAElDC,EACc,WAAlBL,GACEhB,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACL,CAAC7C,IAAsB,KAGzB4C,EAAAA,EAAAA,GAAA,uBACiB7C,EAAW,iBACXmE,EAAAA,EAAAA,GAAcjD,GAC7B4B,MAAO,CACL,CAAC7C,IAAa,EACd,CAACA,IAAmB,GAEtBmE,GAAIpE,EACJqE,QAASvD,KAAKC,cACduD,UAAWxD,KAAKJ,oBAChB6D,KAAK,SACLC,SAAU,EACVC,MAAOV,GAENjD,KAAKmC,WAAWnC,KAAKyC,YACtBV,EAAAA,EAAAA,GAAA,OAAKC,MAAO7C,IACV4C,EAAAA,EAAAA,GAAA,QAAMC,MAAO7C,GAAuB2D,IAGrC9C,KAAKmC,WAAWnC,KAAK2C,SACrB3C,KAAK0B,oBACNK,EAAAA,EAAAA,GAAA,kBAAgB6B,QAASxD,EAAM4B,MAAO7C,EAAY0E,OAAK,EAACC,MAAOb,EAAaf,MAAM,SAItFH,EAAAA,EAAAA,GAAA,OACEC,MAAO,CACL,CAAC7C,IAAsB,KAGzB4C,EAAAA,EAAAA,GAAA,0BACiB7C,EAAW,iBACXmE,EAAAA,EAAAA,GAAcjD,GAC7B4B,MAAO,CACL,CAAC7C,IAAoB,EACrB,CAACA,IAAa,GAEhBmE,GAAIpE,EACJqE,QAASvD,KAAKC,eAEbD,KAAKmC,WAAWnC,KAAKyC,YACtBV,EAAAA,EAAAA,GAAA,QAAMC,MAAO7C,GAAwB2D,GACpC9C,KAAKmC,WAAWnC,KAAK2C,SACrB3C,KAAK0B,oBACNK,EAAAA,EAAAA,GAAA,gBAAcC,MAAO7C,EAAiB8C,KAAMe,EAAWd,MAAM,QAKrE,OACEH,EAAAA,EAAAA,GAACgC,EAAAA,GAAI,CAAAhE,IAAA,4CACFqD,GACDrB,EAAAA,EAAAA,GAAA,WAAAhC,IAAA,6DAA0Bb,EAAY8C,MAAO7C,EAAa6E,QAAS5D,EAAMkD,GAAIpE,IAC3E6C,EAAAA,EAAAA,GAAA,QAAAhC,IAAA,oPC9Sc,woGCAjB,MAAMZ,EAEF,WCcE8E,EAA6C,CAAC,EAQ9CC,EAAyD,CAAC,EAE1DC,EAAmC,CAC9CC,EAAG,GACHC,EAAG,GACHC,EAAG,IAGL,SAASC,EAAcC,GAAgC,IAA/B,KAAEvC,EAAI,MAAEC,GAAuBsC,EACrD,MAAMC,EAAON,EAAUjC,GACjBwC,WAkD0BA,GAChC,MAAMC,GAAqBC,MAAMC,OAAOH,EAAKI,OAAO,KAC9CC,EAAQL,EAAKM,MAAM,KAGzB,GAFmBD,EAAME,OAAS,EAElB,CACd,MAAMC,EAA6B,SAEnCR,EAAOK,EACJI,KAAI,CAACC,EAAMC,IACHD,EAAKE,QAAQJ,GAA4B,SAAkBK,EAAOC,GAGvE,OAFwC,IAAdH,GAA8B,IAAXG,EAGpCD,EAGFA,EAAME,mBAGhBC,KAAK,IAGV,OAAOf,EAAoB,IAAHgB,OAAOjB,GAASA,CAC1C,CA1EekB,CAAkB3D,GACzB4D,EAA0C,MAAjCnB,EAAKI,OAAOJ,EAAKO,OAAS,GACnCa,EAAWD,EAASnB,EAAKqB,UAAU,EAAGrB,EAAKO,OAAS,GAAKP,EAE/D,MAAO,GAAPiB,OAAUG,GAAQH,OAAGlB,GAAIkB,OAAGE,EAAS,IAAM,GAC7C,CAkCA,SAASG,EAAuB1C,GAC9B,OAAOW,EAAUX,EACnB,CC3EA,MCgBa2C,GAAIvG,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,+EAeU,mBAQf,aAQK,6DAgFG,EAhElBoB,iBAAAA,GACOf,KAAKkG,SACRlG,KAAKmG,kBAAiB,KACpBnG,KAAKkG,SAAU,EACflG,KAAKoG,kBAAkB,IAK7B7E,oBAAAA,GAAoB,IAAA8E,EACO,QAAzBA,EAAArG,KAAKsG,4BAAoB,IAAAD,GAAzBA,EAA2BE,aAC3BvG,KAAKsG,qBAAuB,KAG9B1D,MAAAA,GACE,MAAM,GAAEjC,EAAE,QAAE+B,EAAO,SAAE8D,EAAQ,MAAEtE,EAAK,UAAEuE,GAAczG,KAC9C0G,GAAMC,EAAAA,EAAAA,GAAchG,GACpB8D,EAAON,EAAUjC,GACjB0E,IAAaH,EACbI,EAAQ,GAAGlB,OAAOa,GAAY,IACpC,OACEzE,EAAAA,EAAAA,GAACgC,EAAAA,GAAI,CAAAhE,IAAA,0DACUsD,EAAAA,EAAAA,IAAeuD,GAAS,aACzBA,EAAWH,EAAY,KACnChD,KAAMmD,EAAW,MAAQ,OAEzB7E,EAAAA,EAAAA,GAAA,OAAAhC,IAAA,yDACc,OACZiC,MAAO,CACL,CAAC7C,GAAsB,QAARuH,GAAiBhE,EAChCoE,KAAK,GAEPC,KAAK,eACLC,OAAO,OACPC,QAAO,OAAAtB,OAASlB,EAAI,KAAAkB,OAAIlB,GACxByC,MAAM,OACNC,MAAM,8BAELN,EAAM1B,KAAKiC,GACM,kBAATA,GACLrF,EAAAA,EAAAA,GAAA,QAAMsF,EAAGD,KAETrF,EAAAA,EAAAA,GAAA,QAAMsF,EAAGD,EAAKC,EAAGC,QAAS,YAAaF,EAAOA,EAAKE,QAAU,QAgCjE,sBAAMlB,GACZ,MAAM,KAAEnE,EAAI,MAAEC,EAAK,QAAEgE,GAAYlG,KAEjC,KAAKuH,EAAAA,EAAAA,OAAgBtF,IAASiE,EAC5B,OAGF,MAAMsB,EAAiB,CAAEvF,OAAMC,SACzBsE,EF3EDR,EAAuBzB,EE2EOiD,WFxGhCC,eAAyBC,GAC9B,MAAMC,EAAgBpD,EAAemD,GAC/BE,EAAiB5B,EAAuB2B,GAE9C,GAAIC,EACF,OAAOA,EAGJ1D,EAAayD,KAChBzD,EAAayD,GAAiBE,OAAMC,EAAAA,EAAAA,IAAa,iBAADnC,OAAkBgC,EAAa,WAC5EI,MAAMC,GAASA,EAAKC,SACpBC,OAAM,KACLC,QAAQC,MAAM,IAADzC,OAAKgC,EAAa,0CACxB,OAIb,MAAMP,QAAalD,EAAayD,GAGhC,OAFA1D,EAAU0D,GAAiBP,EAEpBA,CACT,CEmFiEiB,CAAUb,GAGnEvF,IAASjC,KAAKiC,OAIlBjC,KAAKwG,SAAWA,GAGVL,gBAAAA,CAAiBmC,GACvBtI,KAAKsG,sBAAuBiC,EAAAA,EAAAA,GAC1B,gBACCC,IACCA,EAAQC,SAASC,IACXA,EAAMC,iBACR3I,KAAKsG,qBAAqBC,aAC1BvG,KAAKsG,qBAAuB,KAC5BgC,OAEF,GAEJ,CAAEM,WAAY,SAGX5I,KAAKsG,qBAKVtG,KAAKsG,qBAAqBuC,QAAQ7I,KAAKW,IAJrC2H,8KD3KU,q5BEAT,MAAMnJ,EACA,YADAA,EAEJ,QAFIA,EAGH,SCsCG2J,GAAMpJ,EAAAA,EAAAA,IAAA,cAAAC,EAAAA,qIAiFjB,KAAAoJ,eAAkBlJ,KACXG,KAAKgJ,WAAYlJ,EAAAA,EAAAA,GAAgBD,EAAME,OAC1CC,KAAKiJ,SACLpJ,EAAMK,mBAgBF,KAAAgJ,aAAe,KACjBlJ,KAAKgJ,UAIThJ,KAAKiJ,QAAQ,EAGP,KAAAE,YAAexI,IACrBX,KAAKoJ,SAAWzI,CAAE,iBAnGgB,iEAqBI,kBAGU,oBA+BlD,cAAMH,SACEC,EAAAA,EAAAA,GAAmBT,OAEzBqJ,EAAAA,EAAAA,GAAarJ,KAAKoJ,UASpBE,mBAAAA,CAAoBC,GAClBA,EAAMC,KAAO,WAUfC,YAAAA,GACOzJ,KAAKgJ,WACRhJ,KAAKiJ,SACLjJ,KAAKQ,YAIDyI,MAAAA,GACNjJ,KAAK4D,SAAW5D,KAAK4D,QACrB5D,KAAK0J,oBAAoBpJ,OAgC3BS,iBAAAA,IACE4I,EAAAA,EAAAA,GAAmB3J,OACnB4J,EAAAA,EAAAA,GAAa5J,OACb6J,EAAAA,EAAAA,GAAY7J,MAGdkB,iBAAAA,IACEE,EAAAA,EAAAA,GAAuBpB,MAGzBqB,gBAAAA,IACEC,EAAAA,EAAAA,GAAmBtB,MAGrBuB,oBAAAA,IACEuI,EAAAA,EAAAA,GAAsB9J,OACtB+J,EAAAA,EAAAA,GAAgB/J,OAChBgK,EAAAA,EAAAA,GAAehK,MAGjBiK,kBAAAA,IACEC,EAAAA,EAAAA,GAAsBlK,MASxB4C,MAAAA,GACE,OACEb,EAAAA,EAAAA,GAACgC,EAAAA,GAAI,CAAAhE,IAAA,2CAACwD,QAASvD,KAAKkJ,aAAc1F,UAAWxD,KAAK+I,iBAChDhH,EAAAA,EAAAA,GAACoI,EAAAA,EAAoB,CAAApK,IAAA,2CAACiJ,SAAUhJ,KAAKgJ,WACnCjH,EAAAA,EAAAA,GAAA,OAAAhC,IAAA,2DACgBsD,EAAAA,EAAAA,GAAcrD,KAAK4D,SAAQ,cAC7BwG,EAAAA,EAAAA,GAAapK,MACzBgC,MAAO7C,EACPkL,IAAKrK,KAAKmJ,YACV1F,KAAK,SACLC,SAAU,IAEV3B,EAAAA,EAAAA,GAAA,OAAAhC,IAAA,2CAAKiC,MAAO7C,IACV4C,EAAAA,EAAAA,GAAA,OAAAhC,IAAA,2CAAKiC,MAAO7C,MAEd4C,EAAAA,EAAAA,GAACuI,EAAAA,EAAmB,CAAAvK,IAAA,2CAACwK,UAAWvK,wDCvN1B,mvGCMX,MAAMwK,EAA4E,CAAC,EAqB1F,SAASC,IACP,MAAM,IAAIC,MAAM,2CAClB,CAEA,SAASC,EAAcJ,GACrBA,EAAU1H,SAAW,IAChB0H,EAAUK,mBACVL,EAAUM,iBAEjB,CAEA,SAASC,KASFrD,eAAetG,EAAcoJ,GAClCA,EAAUK,sBAAwBG,EAAcR,EAAWA,EAAUzJ,iBACrE6J,EAAcJ,EAChB,CAEA9C,eAAesD,EAAcR,EAAyBS,GACpD,KAAKzD,EAAAA,EAAAA,KACH,MAAO,CAAC,EAGV,MAAM,GAAE5G,GAAO4J,EAETU,EADMtK,EAAGuK,QAAQC,cACG7F,QAAQ,WAAY,IAE9C,OArDFmC,eAAgCuD,EAAcT,GAC5C,MAAMxK,EAAM,GAAH4F,OAAM4E,EAAS,KAAA5E,OAAIqF,GAE5B,OAAIR,EAAkCzK,KAItCyK,EAAkCzK,GAAO8H,OAAMC,EAAAA,EAAAA,IAAa,YAADnC,OAAa4E,EAAS,kBAAA5E,OAAiBqF,EAAI,WACnGjD,MAAMC,IACAA,EAAKoD,IACRX,IAEKzC,EAAKC,UAEbC,OAAM,IAAMuC,OAVND,EAAkCzK,EAa7C,CAoCSsL,EAAiBC,EAAAA,EAAAA,GAAmBN,EAAM,OAAQC,EAC3D,CAaOxD,eAAe5G,EAAe0J,EAAyBS,GAC5DT,EAAUK,sBAAwBG,EAAcR,EAAWS,GAC3DL,EAAcJ,EAChB,UAWgBtJ,EAAgBsJ,GAC9BA,EAAUhK,iBAAmBgL,CAC/B,UASgB9J,EAAmB8I,GAEjCA,EAAUhK,iBAAmBuK,CAC/B,CA6CA,SAASS,IACPZ,EAAc3K,KAChB","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/block-section/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/block-section/block-section.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/block-section/block-section.scss?tag=calcite-block-section&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/switch/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/switch/switch.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/switch/switch.scss?tag=calcite-switch&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts"],"sourcesContent":["export const IDS = {\n  content: \"content\",\n  toggle: \"toggle\",\n};\n\nexport const CSS = {\n  chevronIcon: \"chevron-icon\",\n  content: \"content\",\n  iconStart: \"icon--start\",\n  iconEnd: \"icon--end\",\n  invalid: \"invalid\",\n  sectionHeader: \"section-header\",\n  sectionHeaderText: \"section-header__text\",\n  statusIcon: \"status-icon\",\n  switch: \"switch\",\n  toggle: \"toggle\",\n  toggleSwitch: \"toggle--switch\",\n  toggleContainer: \"toggle-container\",\n  toggleSwitchContent: \"toggle--switch__content\",\n  toggleSwitchText: \"toggle--switch__text\",\n  valid: \"valid\",\n};\n\nexport const ICONS = {\n  menuOpen: \"chevron-up\",\n  menuClosed: \"chevron-down\",\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n} as const;\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { focusFirstTabbable, toAriaBoolean } from \"../../utils/dom\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { FlipContext, Status } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { BlockSectionMessages } from \"./assets/block-section/t9n\";\nimport { BlockSectionToggleDisplay } from \"./interfaces\";\nimport { CSS, ICONS, IDS } from \"./resources\";\n\n/**\n * @slot - A slot for adding custom content.\n */\n@Component({\n  tag: \"calcite-block-section\",\n  styleUrl: \"block-section.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class BlockSection implements LocalizedComponent, T9nComponent, LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: IconNameOrString;\n\n  /** Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl: FlipContext;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: IconNameOrString;\n\n  /**\n   * When `true`, expands the component and its contents.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  /**\n   * Displays a status-related indicator icon.\n   *\n   * @deprecated Use `icon-start` instead.\n   */\n  @Prop({ reflect: true }) status: Status;\n\n  /**\n   * The component header text.\n   */\n  @Prop() text: string;\n\n  /**\n   * Specifies how the component's toggle is displayed, where:\n   *\n   * `\"button\"` sets the toggle to a selectable header, and\n   *\n   * `\"switch\"` sets the toggle to a switch.\n   */\n  @Prop({ reflect: true }) toggleDisplay: BlockSectionToggleDisplay = \"button\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: BlockSectionMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<BlockSectionMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first tabbable element.\n   *\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteBlockSectionElement;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: BlockSectionMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the header has been clicked.\n   */\n  @Event({ cancelable: false }) calciteBlockSectionToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleHeaderKeyDown = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      this.toggleSection();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  toggleSection = (): void => {\n    this.open = !this.open;\n    this.calciteBlockSectionToggle.emit();\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n  renderStatusIcon(): VNode[] {\n    const { status } = this;\n    const statusIcon = ICONS[status] ?? false;\n    const statusIconClasses = {\n      [CSS.statusIcon]: true,\n      [CSS.valid]: status == \"valid\",\n      [CSS.invalid]: status == \"invalid\",\n    };\n\n    return statusIcon ? (\n      <calcite-icon class={statusIconClasses} icon={statusIcon} scale=\"s\" />\n    ) : null;\n  }\n\n  renderIcon(icon: string): VNode {\n    const { iconFlipRtl } = this;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    const flipRtlStart = iconFlipRtl === \"both\" || iconFlipRtl === \"start\";\n    const flipRtlEnd = iconFlipRtl === \"both\" || iconFlipRtl === \"end\";\n\n    const isIconStart = icon === this.iconStart;\n\n    /** Icon scale is not variable as the component does not have a scale property */\n    return (\n      <calcite-icon\n        class={isIconStart ? CSS.iconStart : CSS.iconEnd}\n        flipRtl={isIconStart ? flipRtlStart : flipRtlEnd}\n        icon={isIconStart ? this.iconStart : this.iconEnd}\n        key={isIconStart ? this.iconStart : this.iconEnd}\n        scale=\"s\"\n      />\n    );\n  }\n\n  render(): VNode {\n    const { messages, open, text, toggleDisplay } = this;\n    const arrowIcon = open ? ICONS.menuOpen : ICONS.menuClosed;\n\n    const toggleLabel = open ? messages.collapse : messages.expand;\n\n    const headerNode =\n      toggleDisplay === \"switch\" ? (\n        <div\n          class={{\n            [CSS.toggleContainer]: true,\n          }}\n        >\n          <div\n            aria-controls={IDS.content}\n            aria-expanded={toAriaBoolean(open)}\n            class={{\n              [CSS.toggle]: true,\n              [CSS.toggleSwitch]: true,\n            }}\n            id={IDS.toggle}\n            onClick={this.toggleSection}\n            onKeyDown={this.handleHeaderKeyDown}\n            role=\"button\"\n            tabIndex={0}\n            title={toggleLabel}\n          >\n            {this.renderIcon(this.iconStart)}\n            <div class={CSS.toggleSwitchContent}>\n              <span class={CSS.toggleSwitchText}>{text}</span>\n            </div>\n\n            {this.renderIcon(this.iconEnd)}\n            {this.renderStatusIcon()}\n            <calcite-switch checked={open} class={CSS.switch} inert label={toggleLabel} scale=\"s\" />\n          </div>\n        </div>\n      ) : (\n        <div\n          class={{\n            [CSS.toggleContainer]: true,\n          }}\n        >\n          <button\n            aria-controls={IDS.content}\n            aria-expanded={toAriaBoolean(open)}\n            class={{\n              [CSS.sectionHeader]: true,\n              [CSS.toggle]: true,\n            }}\n            id={IDS.toggle}\n            onClick={this.toggleSection}\n          >\n            {this.renderIcon(this.iconStart)}\n            <span class={CSS.sectionHeaderText}>{text}</span>\n            {this.renderIcon(this.iconEnd)}\n            {this.renderStatusIcon()}\n            <calcite-icon class={CSS.chevronIcon} icon={arrowIcon} scale=\"s\" />\n          </button>\n        </div>\n      );\n\n    return (\n      <Host>\n        {headerNode}\n        <section aria-labelledby={IDS.toggle} class={CSS.content} hidden={!open} id={IDS.content}>\n          <slot />\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply bg-foreground-1 text-n1 box-border block;\n\n  color: var(--calcite-color-text-2);\n}\n\n:host([open]) {\n  @apply border-b-color-3\n    border-0\n    border-b\n    border-solid;\n\n  .toggle {\n    color: var(--calcite-color-text-1);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n\n  .chevron-icon {\n    color: var(--calcite-color-text-3);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n}\n\n:host(:last-child) {\n  @apply border-b-0;\n}\n\n.toggle {\n  @apply font-sans w-full border-0 bg-transparent;\n\n  gap: var(--calcite-spacing-md);\n  color: var(--calcite-color-text-2);\n  font-weight: var(--calcite-font-weight-normal);\n\n  &:hover {\n    color: var(--calcite-color-text-1);\n  }\n}\n\n.toggle--switch,\n.section-header {\n  @apply text-n1\n    focus-base\n    mx-0\n    my-1\n    flex\n    cursor-pointer\n    select-none\n    items-center\n    px-0\n    py-2;\n\n  &:focus {\n    @apply focus-outset;\n  }\n  &:hover {\n    color: var(--calcite-color-text-1);\n  }\n}\n\n.section-header__text {\n  @apply my-0\n    flex-auto;\n\n  text-align: initial;\n  word-wrap: anywhere;\n}\n\n.toggle-container {\n  @apply flex items-center relative bg-transparent;\n  word-break: break-word;\n\n  .toggle--switch__content {\n    @apply flex flex-auto items-center;\n  }\n\n  .icon--end,\n  .icon--start,\n  .chevron-icon {\n    @apply flex items-center;\n\n    color: var(--calcite-color-text-3);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n}\n\n.status-icon {\n  @apply flex items-center;\n}\n\n.status-icon.valid {\n  color: theme(\"colors.success\");\n}\n\n.status-icon.invalid {\n  color: theme(\"colors.danger\");\n}\n\n@include base-component();\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export const CSS = {\n  container: \"container\",\n  track: \"track\",\n  handle: \"handle\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport { focusElement, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  CheckableFormComponent,\n  connectForm,\n  disconnectForm,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-switch\",\n  styleUrl: \"switch.scss\",\n  shadow: true,\n})\nexport class Switch\n  implements LabelableComponent, CheckableFormComponent, InteractiveComponent, LoadableComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** When `true`, the component is checked. */\n  @Prop({ reflect: true, mutable: true }) checked = false;\n\n  /** The component's value. */\n  @Prop() value: any;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSwitchElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  switchEl: HTMLDivElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: Switch[\"checked\"];\n\n  defaultChecked: boolean;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusElement(this.switchEl);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    input.type = \"checkbox\";\n  }\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (!this.disabled && isActivationKey(event.key)) {\n      this.toggle();\n      event.preventDefault();\n    }\n  };\n\n  onLabelClick(): void {\n    if (!this.disabled) {\n      this.toggle();\n      this.setFocus();\n    }\n  }\n\n  private toggle(): void {\n    this.checked = !this.checked;\n    this.calciteSwitchChange.emit();\n  }\n\n  private clickHandler = (): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    this.toggle();\n  };\n\n  private setSwitchEl = (el: HTMLDivElement): void => {\n    this.switchEl = el;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the `checked` value has changed.\n   */\n  @Event({ cancelable: false }) calciteSwitchChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <Host onClick={this.clickHandler} onKeyDown={this.keyDownHandler}>\n        <InteractiveContainer disabled={this.disabled}>\n          <div\n            aria-checked={toAriaBoolean(this.checked)}\n            aria-label={getLabelText(this)}\n            class={CSS.container}\n            ref={this.setSwitchEl}\n            role=\"switch\"\n            tabIndex={0}\n          >\n            <div class={CSS.track}>\n              <div class={CSS.handle} />\n            </div>\n            <HiddenFormInputSlot component={this} />\n          </div>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","// sizes\n:host([scale=\"s\"]) {\n  .container {\n    @apply h-3;\n  }\n  .track {\n    @apply h-3 w-6;\n  }\n  .handle {\n    @apply h-2 w-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  .container {\n    @apply h-4;\n  }\n  .track {\n    @apply h-4 w-8;\n  }\n  .handle {\n    @apply h-3 w-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .container {\n    @apply h-6;\n  }\n  .track {\n    @apply h-6 w-12;\n  }\n  .handle {\n    @apply h-5 w-5;\n  }\n}\n\n:host {\n  @apply relative\n    inline-block\n    w-auto\n    cursor-pointer\n    select-none\n    align-middle;\n  tap-highlight-color: transparent;\n}\n\n@include disabled();\n\n.container {\n  @apply outline-0;\n}\n\n.track {\n  @apply bg-foreground-2\n    border-color-2\n    pointer-events-none\n    relative\n    box-border\n    inline-block\n    rounded-full\n    border\n    border-solid\n    align-top\n    focus-base;\n}\n\n:host(:focus) .track {\n  @apply focus-outset;\n}\n\n.handle {\n  @apply bg-foreground-1\n    border-color-input\n    pointer-events-none\n    absolute\n    block\n    rounded-full\n    border-2\n    border-solid\n    transition-all\n    duration-150\n    ease-in-out;\n  inset-block-start: -1px;\n  inset-inline: -1px theme(\"inset.auto\");\n}\n\n.container:hover,\n:host(:focus) {\n  .handle {\n    @apply border-color-brand;\n    box-shadow: inset 0 0 0 1px var(--calcite-color-brand);\n  }\n}\n\n:host([checked]) {\n  .track {\n    @apply bg-brand border-color-brand-hover;\n  }\n  .handle {\n    @apply border-color-brand;\n    inset-inline: theme(\"inset.auto\") -1px;\n  }\n\n  .container:hover {\n    .handle {\n      @apply border-color-brand-hover;\n      box-shadow: inset 0 0 0 1px var(--calcite-color-brand-hover);\n    }\n  }\n}\n\n@media (forced-colors: active) {\n  :host([checked]) {\n    .track {\n      background-color: canvasText;\n    }\n  }\n}\n\n@include hidden-form-input();\n@include base-component();\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["IDS","CSS","ICONS","menuOpen","menuClosed","valid","invalid","BlockSection","proxyCustomElement","HTMLElement","handleHeaderKeyDown","event","isActivationKey","key","this","toggleSection","preventDefault","stopPropagation","open","calciteBlockSectionToggle","emit","onMessagesChange","setFocus","componentFocusable","focusFirstTabbable","el","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","componentWillLoad","setUpMessages","setUpLoadableComponent","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLocalized","disconnectMessages","renderStatusIcon","_ICONS$status","status","statusIcon","statusIconClasses","h","class","icon","scale","renderIcon","iconFlipRtl","undefined","flipRtlStart","flipRtlEnd","isIconStart","iconStart","flipRtl","iconEnd","render","messages","text","toggleDisplay","arrowIcon","toggleLabel","collapse","expand","headerNode","toAriaBoolean","id","onClick","onKeyDown","role","tabIndex","title","checked","inert","label","Host","hidden","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","_ref","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","concat","normalizeIconName","filled","iconName","substring","getCachedIconDataByKey","Icon","visible","waitUntilVisible","loadIconPathData","_this$intersectionObs","intersectionObserver","disconnect","pathData","textLabel","dir","getElementDir","semantic","paths","svg","fill","height","viewBox","width","xmlns","path","d","opacity","isBrowser","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","Switch","keyDownHandler","disabled","toggle","clickHandler","setSwitchEl","switchEl","focusElement","syncHiddenFormInput","input","type","onLabelClick","calciteSwitchChange","connectInteractive","connectLabel","connectForm","disconnectInteractive","disconnectLabel","disconnectForm","componentDidRender","updateHostInteraction","InteractiveContainer","getLabelText","ref","HiddenFormInputSlot","component","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","ok","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}