{"version":3,"file":"static/js/26369.66bd118b.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/Validation.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/select/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/select/select.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/select/select.scss?tag=calcite-select&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/interfaces.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.scss?tag=calcite-input-message&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts"],"sourcesContent":["import { FunctionalComponent, h } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\n\ninterface ValidationProps extends JSXBase.HTMLAttributes {\n  scale: Scale;\n  status: Status;\n  icon?: IconNameOrString | boolean;\n  message: string;\n}\n\nexport const CSS = {\n  validationContainer: \"validation-container\",\n};\n\nexport const Validation: FunctionalComponent<ValidationProps> = ({\n  scale,\n  status,\n  icon,\n  message,\n}) => (\n  <div class={CSS.validationContainer}>\n    <calcite-input-message icon={icon} scale={scale} status={status}>\n      {message}\n    </calcite-input-message>\n  </div>\n);\n","export const CSS = {\n  icon: \"icon\",\n  iconContainer: \"icon-container\",\n  select: \"select\",\n  wrapper: \"wrapper\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale, Status, Width } from \"../interfaces\";\nimport { getIconScale } from \"../../utils/component\";\nimport { Validation } from \"../functional/Validation\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\n\ntype OptionOrGroup = HTMLCalciteOptionElement | HTMLCalciteOptionGroupElement;\ntype NativeOptionOrGroup = HTMLOptionElement | HTMLOptGroupElement;\n\nfunction isOption(optionOrGroup: OptionOrGroup): optionOrGroup is HTMLCalciteOptionElement {\n  return optionOrGroup.tagName === \"CALCITE-OPTION\";\n}\n\nfunction isOptionGroup(\n  optionOrGroup: OptionOrGroup,\n): optionOrGroup is HTMLCalciteOptionGroupElement {\n  return optionOrGroup.tagName === \"CALCITE-OPTION-GROUP\";\n}\n\n/**\n * @slot - A slot for adding `calcite-option`s.\n */\n@Component({\n  tag: \"calcite-select\",\n  styleUrl: \"select.scss\",\n  shadow: true,\n})\nexport class Select\n  implements LabelableComponent, FormComponent, InteractiveComponent, LoadableComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /**\n   * Accessible name for the component.\n   *\n   */\n  @Prop() label!: string;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** The component's `selectedOption` value. */\n  @Prop({ mutable: true }) value: string = null;\n\n  @Watch(\"value\")\n  valueHandler(value: string): void {\n    this.updateItemsFromValue(value);\n  }\n\n  /**\n   * The component's selected option `HTMLElement`.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedOption: HTMLCalciteOptionElement;\n\n  @Watch(\"selectedOption\")\n  selectedOptionHandler(selectedOption: HTMLCalciteOptionElement): void {\n    this.value = selectedOption?.value;\n  }\n\n  /**\n   * Specifies the width of the component.\n   */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSelectElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: Select[\"value\"];\n\n  private componentToNativeEl = new Map<OptionOrGroup, NativeOptionOrGroup>();\n\n  private mutationObserver = createObserver(\"mutation\", () => this.populateInternalSelect());\n\n  private selectEl: HTMLSelectElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    const { el } = this;\n\n    this.mutationObserver?.observe(el, {\n      subtree: true,\n      childList: true,\n    });\n\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n\n    if (typeof this.value === \"string\") {\n      this.updateItemsFromValue(this.value);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    afterConnectDefaultValueSet(this, this.selectedOption?.value ?? \"\");\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusElement(this.selectEl);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the `selectedOption` changes.\n   */\n  @Event({ cancelable: false }) calciteSelectChange: EventEmitter<void>;\n\n  private handleInternalSelectChange = (): void => {\n    const selected = this.selectEl.selectedOptions[0];\n    this.selectFromNativeOption(selected);\n    requestAnimationFrame(() => this.emitChangeEvent());\n  };\n\n  @Listen(\"calciteInternalOptionChange\")\n  @Listen(\"calciteInternalOptionGroupChange\")\n  protected handleOptionOrGroupChange(event: CustomEvent): void {\n    event.stopPropagation();\n\n    const optionOrGroup = event.target as OptionOrGroup;\n    const nativeEl = this.componentToNativeEl.get(optionOrGroup);\n\n    if (!nativeEl) {\n      return;\n    }\n\n    this.updateNativeElement(optionOrGroup, nativeEl);\n\n    if (isOption(optionOrGroup) && optionOrGroup.selected) {\n      this.deselectAllExcept(optionOrGroup);\n      this.selectedOption = optionOrGroup;\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private updateItemsFromValue(value: string): void {\n    this.el\n      .querySelectorAll(\"calcite-option\")\n      .forEach((item) => (item.selected = item.value === value));\n  }\n\n  private updateNativeElement(\n    optionOrGroup: OptionOrGroup,\n    nativeOptionOrGroup: NativeOptionOrGroup,\n  ): void {\n    nativeOptionOrGroup.disabled = optionOrGroup.disabled;\n    nativeOptionOrGroup.label = optionOrGroup.label;\n\n    if (isOption(optionOrGroup)) {\n      const option = nativeOptionOrGroup as HTMLOptionElement;\n      option.selected = optionOrGroup.selected;\n      option.value = optionOrGroup.value;\n\n      // need to set innerText for mobile\n      // see https://stackoverflow.com/questions/35021620/ios-safari-not-showing-all-options-for-select-menu/41749701\n      option.innerText = optionOrGroup.label;\n    }\n  }\n\n  private populateInternalSelect = (): void => {\n    const optionsAndGroups = Array.from(\n      this.el.children as HTMLCollectionOf<OptionOrGroup | HTMLSlotElement>,\n    ).filter(\n      (child) => child.tagName === \"CALCITE-OPTION\" || child.tagName === \"CALCITE-OPTION-GROUP\",\n    ) as OptionOrGroup[];\n\n    this.clearInternalSelect();\n\n    optionsAndGroups.forEach((optionOrGroup) =>\n      this.selectEl?.append(this.toNativeElement(optionOrGroup)),\n    );\n  };\n\n  private clearInternalSelect(): void {\n    this.componentToNativeEl.forEach((value) => value.remove());\n    this.componentToNativeEl.clear();\n  }\n\n  private storeSelectRef = (node: HTMLSelectElement): void => {\n    this.selectEl = node;\n    this.populateInternalSelect();\n\n    const selected = this.selectEl.selectedOptions[0];\n    this.selectFromNativeOption(selected);\n  };\n\n  private selectFromNativeOption(nativeOption: HTMLOptionElement): void {\n    if (!nativeOption) {\n      return;\n    }\n\n    let futureSelected: HTMLCalciteOptionElement;\n\n    this.componentToNativeEl.forEach((nativeOptionOrGroup, optionOrGroup) => {\n      if (isOption(optionOrGroup) && nativeOptionOrGroup === nativeOption) {\n        optionOrGroup.selected = true;\n        futureSelected = optionOrGroup;\n        this.deselectAllExcept(optionOrGroup as HTMLCalciteOptionElement);\n      }\n    });\n\n    if (futureSelected) {\n      this.selectedOption = futureSelected;\n    }\n  }\n\n  private toNativeElement(\n    optionOrGroup: HTMLCalciteOptionElement | HTMLCalciteOptionGroupElement,\n  ): NativeOptionOrGroup {\n    if (isOption(optionOrGroup)) {\n      const option = document.createElement(\"option\");\n      this.updateNativeElement(optionOrGroup, option);\n      this.componentToNativeEl.set(optionOrGroup, option);\n\n      return option;\n    }\n\n    if (isOptionGroup(optionOrGroup)) {\n      const group = document.createElement(\"optgroup\");\n      this.updateNativeElement(optionOrGroup, group);\n\n      Array.from(optionOrGroup.children as HTMLCollectionOf<HTMLCalciteOptionElement>).forEach(\n        (option) => {\n          const nativeOption = this.toNativeElement(option);\n          group.append(nativeOption);\n          this.componentToNativeEl.set(optionOrGroup, nativeOption);\n        },\n      );\n\n      this.componentToNativeEl.set(optionOrGroup, group);\n\n      return group;\n    }\n\n    throw new Error(\"unsupported element child provided\");\n  }\n\n  private deselectAllExcept(except: HTMLCalciteOptionElement): void {\n    this.el.querySelectorAll<HTMLCalciteOptionElement>(\"calcite-option\").forEach((option) => {\n      if (option === except) {\n        return;\n      }\n\n      option.selected = false;\n    });\n  }\n\n  private emitChangeEvent = (): void => {\n    this.calciteSelectChange.emit();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderChevron(): VNode {\n    return (\n      <div class={CSS.iconContainer}>\n        <calcite-icon class={CSS.icon} icon=\"chevron-down\" scale={getIconScale(this.scale)} />\n      </div>\n    );\n  }\n\n  render(): VNode {\n    const { disabled } = this;\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={disabled}>\n          <div class={CSS.wrapper}>\n            <select\n              aria-label={getLabelText(this)}\n              class={CSS.select}\n              disabled={disabled}\n              onChange={this.handleInternalSelectChange}\n              ref={this.storeSelectRef}\n            >\n              <slot />\n            </select>\n            {this.renderChevron()}\n            <HiddenFormInputSlot component={this} />\n          </div>\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-select-font-size: The font size of `calcite-option`s in the component.\n * @prop --calcite-select-spacing: The padding around the selected option text.\n */\n\n:host {\n  @extend %component-spacing;\n  @apply flex flex-col;\n}\n\n.wrapper {\n  @apply relative flex items-stretch;\n  inline-size: var(--select-width);\n\n  &:focus-within,\n  &:active,\n  &:hover {\n    .icon {\n      color: var(--calcite-color-text-1);\n    }\n  }\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  --calcite-select-font-size: theme(\"fontSize.n2h\");\n  --calcite-select-spacing-inline: theme(\"spacing.2\") theme(\"spacing.8\");\n\n  .wrapper {\n    @apply h-6;\n  }\n\n  .icon-container {\n    @apply px-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-select-font-size: theme(\"fontSize.n1h\");\n  --calcite-select-spacing-inline: theme(\"spacing.3\") theme(\"spacing.10\");\n\n  .wrapper {\n    @apply h-8;\n  }\n\n  .icon-container {\n    @apply px-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-select-font-size: theme(\"fontSize.0h\");\n  --calcite-select-spacing-inline: theme(\"spacing.4\") theme(\"spacing.12\");\n\n  .wrapper {\n    block-size: 44px;\n  }\n\n  .icon-container {\n    @apply px-4;\n  }\n}\n\n:host([width=\"auto\"]) {\n  @apply w-auto;\n}\n\n:host([width=\"half\"]) {\n  @apply w-1/2;\n}\n\n:host([width=\"full\"]) {\n  @apply w-full;\n}\n\n.select {\n  @apply bg-foreground-1 border-color-input text-color-2 font-inherit focus-base m-0 box-border w-full cursor-pointer appearance-none truncate rounded-none border border-solid;\n  font-size: var(--calcite-select-font-size);\n  padding-inline: var(--calcite-select-spacing-inline);\n  border-inline-end-width: theme(\"borderWidth.0\");\n\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\n// override user agent stylesheet disabled styling\nselect:disabled {\n  @apply border-color-input bg-opacity-100;\n}\n\n.icon-container {\n  @apply border-color-input text-color-2 pointer-events-none absolute inset-y-0 flex items-center border-0 border-solid bg-transparent;\n  inset-inline-end: theme(\"inset.0\");\n  border-inline-width: theme(\"borderWidth.0\") theme(\"borderWidth.DEFAULT\");\n\n  .icon {\n    color: var(--calcite-color-text-3);\n  }\n}\n\n:host([status=\"invalid\"]) {\n  select,\n  .icon-container {\n    @apply border-color-danger;\n  }\n\n  select:focus,\n  .icon-container:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n.select:focus ~ .icon-container {\n  @apply border-color-transparent;\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include base-component();\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export const StatusIconDefaults = {\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n  idle: \"information\",\n} as const;\n","import { Component, Element, h, Host, Prop, VNode, Watch } from \"@stencil/core\";\nimport { setRequestedIcon } from \"../../utils/dom\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { StatusIconDefaults } from \"./interfaces\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-input-message\",\n  styleUrl: \"input-message.scss\",\n  shadow: true,\n})\nexport class InputMessage {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  @Watch(\"status\")\n  @Watch(\"icon\")\n  handleIconEl(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  render(): VNode {\n    const hidden = this.el.hidden;\n    return (\n      <Host calcite-hydrated-hidden={hidden}>\n        {this.renderIcon(this.requestedIcon)}\n        <slot />\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputMessageElement;\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(iconName: IconNameOrString): VNode {\n    if (iconName) {\n      return (\n        <calcite-icon\n          class=\"calcite-input-message-icon\"\n          flipRtl={this.iconFlipRtl}\n          icon={iconName}\n          scale=\"s\"\n        />\n      );\n    }\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-message-spacing-value: The top margin spacing above the component.\n */\n\n:host {\n  @apply text-color-1 transition-default box-border flex h-auto w-full items-center font-medium opacity-100;\n  --calcite-input-message-spacing-value: theme(\"spacing.1\");\n  margin-block-start: var(--calcite-input-message-spacing-value);\n}\n\n.calcite-input-message-icon {\n  @apply transition-default pointer-events-none inline-flex flex-shrink-0;\n  margin-inline-end: theme(\"margin.2\");\n}\n\n:host([status=\"invalid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([status=\"warning\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([status=\"valid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([status=\"idle\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3h;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2h;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-n1h;\n}\n\n@include base-component();\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["CSS","Validation","_ref","scale","status","icon","message","h","class","isOption","optionOrGroup","tagName","Select","proxyCustomElement","HTMLElement","componentToNativeEl","Map","mutationObserver","createObserver","this","populateInternalSelect","handleInternalSelectChange","selected","selectEl","selectedOptions","selectFromNativeOption","requestAnimationFrame","emitChangeEvent","optionsAndGroups","Array","from","el","children","filter","child","clearInternalSelect","forEach","_this$selectEl","append","toNativeElement","storeSelectRef","node","calciteSelectChange","emit","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","valueHandler","value","updateItemsFromValue","selectedOptionHandler","selectedOption","connectedCallback","_this$mutationObserve","observe","subtree","childList","connectInteractive","connectLabel","connectForm","disconnectedCallback","_this$mutationObserve2","disconnect","disconnectInteractive","disconnectLabel","disconnectForm","componentWillLoad","setUpLoadableComponent","componentDidLoad","_this$selectedOption$","_this$selectedOption","setComponentLoaded","afterConnectDefaultValueSet","componentDidRender","updateHostInteraction","setFocus","componentFocusable","focusElement","handleOptionOrGroupChange","event","stopPropagation","target","nativeEl","get","updateNativeElement","deselectAllExcept","onLabelClick","querySelectorAll","item","nativeOptionOrGroup","disabled","label","option","innerText","remove","clear","nativeOption","futureSelected","document","createElement","set","isOptionGroup","group","Error","except","renderChevron","getIconScale","render","Host","key","InteractiveContainer","getLabelText","onChange","ref","HiddenFormInputSlot","component","validationMessage","validationIcon","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","concat","normalizeIconName","filled","iconName","substring","getCachedIconDataByKey","id","Icon","visible","waitUntilVisible","loadIconPathData","_this$intersectionObs","intersectionObserver","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","toAriaBoolean","role","svg","fill","height","viewBox","width","xmlns","path","d","opacity","isBrowser","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","entries","entry","isIntersecting","rootMargin","StatusIconDefaults","invalid","idle","InputMessage","handleIconEl","requestedIcon","setRequestedIcon","hidden","renderIcon","iconFlipRtl","type","options","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","push","unobserve","newObservedEntries","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}