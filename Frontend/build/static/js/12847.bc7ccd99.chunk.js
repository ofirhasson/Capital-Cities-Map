"use strict";(self.webpackChunknorthwind=self.webpackChunknorthwind||[]).push([[12847,94304],{80457:(e,t,i)=>{i.d(t,{Z:()=>n});class n{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.lengths=null!==e&&void 0!==e?e:[],this.coords=null!==t&&void 0!==t?t:[],this.hasIndeterminateRingOrder=i}static fromJSON(e){return new n(e.lengths,e.coords,e.hasIndeterminateRingOrder)}static fromRect(e){const[t,i,s,r]=e,l=s-t,a=r-i;return new n([5],[t,i,l,0,0,a,-l,0,0,-a])}get isPoint(){return 0===this.lengths.length}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce(((e,t)=>e+t))}forEachVertex(e){let t=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(let i=0;i<this.lengths.length;i++){const n=this.lengths[i];for(let i=0;i<n;i++)e(this.coords[2*(i+t)],this.coords[2*(i+t)+1]);t+=n}}deltaDecode(){const e=this.clone(),{coords:t,lengths:i}=e;let n=0;for(const s of i){for(let e=1;e<s;e++)t[2*(n+e)]+=t[2*(n+e)-2],t[2*(n+e)+1]+=t[2*(n+e)-1];n+=s}return e}clone(e){if(0===this.lengths.length)return new n([],[this.coords[0],this.coords[1]]);const t=2*(0===this.lengths.length?1:this.lengths.reduce(((e,t)=>e+t))),i=this.coords.slice(0,t);return e?(e.set(i),new n(this.lengths,e,this.hasIndeterminateRingOrder)):new n(Array.from(this.lengths),Array.from(i),this.hasIndeterminateRingOrder)}}},59001:(e,t,i)=>{i.d(t,{Z:()=>r});var n=i(82272),s=i(51e3);class r{constructor(){this._resourceMap=new Map,this._inFlightResourceMap=new Map,this.geometryEngine=null,this.geometryEnginePromise=null}destroy(){this._inFlightResourceMap.clear(),this._resourceMap.clear()}getResource(e){var t;return null!==(t=this._resourceMap.get(e))&&void 0!==t?t:null}async fetchResource(e,t){const i=this._resourceMap.get(e);if(i)return{width:i.width,height:i.height};let n=this._inFlightResourceMap.get(e);return n?n.then((e=>({width:e.width,height:e.height}))):(n=(0,s.n$)(e,t),this._inFlightResourceMap.set(e,n),n.then((t=>(this._inFlightResourceMap.delete(e),this._resourceMap.set(e,t),{width:t.width,height:t.height})),(()=>({width:0,height:0}))))}deleteResource(e){this._inFlightResourceMap.delete(e),this._resourceMap.delete(e)}loadFont(e){return(0,n.mx)(e)}}},94304:(e,t,i)=>{i.r(t),i.d(t,{CIMSymbolRasterizer:()=>h});var n=i(59001),s=i(28222),r=i(78915),l=i(26707),a=i(31027);class h{constructor(e){this._spatialReference=e,this._imageDataCanvas=null,this._cimResourceManager=new n.Z}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(e,t,i,n,s,h,c,g,d){if(!e)return null;const{data:u}=e;if(!u||"CIMSymbolReference"!==u.type||!u.symbol)return null;const{symbol:m}=u;h||(h=(0,a.JW)(m));const y=await l.E.resolveSymbolOverrides(u,t,this._spatialReference,s,h,c,g),w=this._cimResourceManager,f=[];r.B$.fetchResources(y,w,f),r.B$.fetchFonts(y,w,f),f.length>0&&await Promise.all(f);const{width:p,height:v}=i,M=o(h,p,v,n),b=r.B$.getEnvelope(y,M,w);if(!b)return null;let R=1,_=0,S=0;switch(m.type){case"CIMPointSymbol":case"CIMTextSymbol":{let e=1;b.width>p&&(e=p/b.width);let t=1;b.height>v&&(t=v/b.height),"preview"===n&&(b.width<p&&(e=p/b.width),b.height<v&&(t=v/b.height)),R=Math.min(e,t),_=b.x+b.width/2,S=b.y+b.height/2}break;case"CIMLineSymbol":{(d||b.height>v)&&(R=v/b.height),S=b.y+b.height/2;const e=b.x*R+p/2,t=(b.x+b.width)*R+p/2,{paths:i}=M;i[0][0][0]-=e/R,i[0][2][0]-=(t-p)/R}break;case"CIMPolygonSymbol":{_=b.x+b.width/2,S=b.y+b.height/2;const e=b.x*R+p/2,t=(b.x+b.width)*R+p/2,i=b.y*R+v/2,n=(b.y+b.height)*R+v/2,{rings:s}=M;e<0&&(s[0][0][0]-=e,s[0][3][0]-=e,s[0][4][0]-=e),i<0&&(s[0][0][1]+=i,s[0][1][1]+=i,s[0][4][1]+=i),t>p&&(s[0][1][0]-=t-p,s[0][2][0]-=t-p),n>v&&(s[0][2][1]+=n-v,s[0][3][1]+=n-v)}}const C={type:"cim",data:{type:"CIMSymbolReference",symbol:y}};return this.rasterize(C,p,v,_,S,R,h,1,M)}rasterize(e,t,i,n,r,l,h){let c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,g=arguments.length>8&&void 0!==arguments[8]?arguments[8]:null;const{data:d}=e;if(!d||"CIMSymbolReference"!==d.type||!d.symbol)return null;const{symbol:u}=d,m=this._canvas,y=1.3333333333333333*(window.devicePixelRatio||1);m.width=t*y,m.height=i*y,h||(h=(0,a.JW)(u)),g||(g=o(h,t,i,"legend")),m.width+=2*c,m.height+=2*c;const w=m.getContext("2d",{willReadFrequently:!0}),f=s.zA.createIdentity();return f.translate(-n,-r),f.scale(l*y,-l*y),f.translate(t*y/2+c,i*y/2+c),w.clearRect(0,0,m.width,m.height),new s.cD(w,this._cimResourceManager,f,!0).drawSymbol(u,g),w.getImageData(0,0,m.width,m.height)}}function o(e,t,i,n){const s=-t/2+1,r=t/2-1,l=i/2-1,a=-i/2+1;switch(e){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[s,0],[0,0],[r,0]]]};default:return"legend"===n?{rings:[[[s,l],[r,0],[r,a],[s,a],[s,l]]]}:{rings:[[[s,l],[r,l],[r,a],[s,a],[s,l]]]}}}},54763:(e,t,i)=>{i.d(t,{previewCIMSymbol:()=>w});var n=i(17842),s=i(78915),r=i(94304),l=i(26707),a=i(31027),h=i(37817),o=i(69157);const c=new r.CIMSymbolRasterizer(null),g=(0,n.Wz)(h.b_.size),d=(0,n.Wz)(h.b_.maxSize),u=(0,n.Wz)(h.b_.lineWidth),m=1;async function y(e,t,i){const n=null===t||void 0===t?void 0:t.size;let r=null!=n&&"object"==typeof n&&"width"in n?n.width:n,a=null!=n&&"object"==typeof n&&"height"in n?n.height:n;if(null==r||null==a)if("esriGeometryPolygon"===i)r=g,a=g;else{const n=await async function(e,t,i){const{feature:n,fieldMap:r,viewParams:a}=t.cimOptions||t,h=await l.E.resolveSymbolOverrides(e.data,n,null,r,i,null,a);if(!h)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:h},e.data.primitiveOverrides=void 0;const o=[];return s.B$.fetchResources(h,c.resourceManager,o),s.B$.fetchFonts(h,c.resourceManager,o),o.length>0&&await Promise.all(o),s.B$.getEnvelope(h,null,c.resourceManager)}(e,t,i);n&&(r=n.width,a=n.height),"esriGeometryPolyline"===i&&(r=u),r=null!=r&&isFinite(r)?Math.min(r,d):g,a=null!=a&&isFinite(a)?Math.max(Math.min(a,d),m):g}return"legend"===t.style&&"esriGeometryPolyline"===i&&(r=u),{width:r,height:a}}async function w(e){var t,i,s;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{node:l,opacity:h,symbolConfig:g}=r,d=null!=g&&"object"==typeof g&&"isSquareFill"in g&&g.isSquareFill,u=r.cimOptions||r,m=u.geometryType||(0,a.JW)(null===e||void 0===e||null===(t=e.data)||void 0===t?void 0:t.symbol),w=await y(e,r,m),{feature:f,fieldMap:p}=u,v=d||"esriGeometryPolygon"!==m?"preview":"legend",M=await c.rasterizeCIMSymbolAsync(e,f,w,v,p,m,null,u.viewParams,u.allowScalingUp);if(!M)return null;const{width:b,height:R}=M,_=document.createElement("canvas");_.width=b,_.height=R,_.getContext("2d").putImageData(M,0,0);const S=(0,n.F2)(w.width),C=(0,n.F2)(w.height),D=new Image(S,C);D.src=_.toDataURL(),D.ariaLabel=null!==(i=r.ariaLabel)&&void 0!==i?i:null,D.alt=null!==(s=r.ariaLabel)&&void 0!==s?s:"",null!=h&&(D.style.opacity="".concat(h));let I=D;if(null!=r.effectView){const e={shape:{type:"image",x:0,y:0,width:S,height:C,src:D.src},fill:null,stroke:null,offset:[0,0]};I=(0,o.wh)([[e]],[S,C],{effectView:r.effectView,ariaLabel:r.ariaLabel})}return l&&I&&l.appendChild(I),I}},94109:(e,t,i)=>{i.d(t,{$0:()=>V,A5:()=>K,BZ:()=>U,FM:()=>L,GV:()=>q,Ib:()=>d,J1:()=>j,JS:()=>$,KA:()=>B,Kt:()=>c,Ly:()=>f,NG:()=>W,NT:()=>Y,NY:()=>u,Of:()=>R,Pp:()=>l,S3:()=>P,Sf:()=>b,Uz:()=>J,Vo:()=>O,Zt:()=>M,_8:()=>T,_E:()=>k,ad:()=>r,bm:()=>y,ce:()=>p,cz:()=>v,dD:()=>G,do:()=>I,fG:()=>z,g3:()=>C,gj:()=>o,i9:()=>s,iA:()=>E,iD:()=>h,j1:()=>w,k9:()=>n,kU:()=>D,l3:()=>N,nn:()=>Z,pd:()=>x,s4:()=>A,uk:()=>a,vk:()=>_,wJ:()=>g,wN:()=>F,wi:()=>S,zZ:()=>m});const n=1e-30,s=512,r=16777216,l=8,a=29,h=24,o=4,c=0,g=0,d=0,u=1,m=2,y=3,w=4,f=5,p=6,v=12,M=5,b=6,R=5,_=6;var S;!function(e){e[e.FilterFlags=0]="FilterFlags",e[e.Animation=1]="Animation",e[e.GPGPU=2]="GPGPU",e[e.VV=3]="VV",e[e.DD0=4]="DD0",e[e.DD1=5]="DD1",e[e.DD2=6]="DD2"}(S||(S={}));const C=8,D=C<<1,I=1.05,F=3,P=1,x=3,z=3,G=5,k=6,O=1.15,A=2,E=128,V=256-2*A,L=2,$=10,B=1024,J=128,W=4,U=1,Z=1<<20,j=.75,N=10,q=.75,T=256,K=32,Y=512}}]);
//# sourceMappingURL=12847.bc7ccd99.chunk.js.map