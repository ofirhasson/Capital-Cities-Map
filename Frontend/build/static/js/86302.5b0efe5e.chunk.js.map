{"version":3,"file":"static/js/86302.5b0efe5e.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/sheet/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/sheet/sheet.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/sheet/sheet.scss?tag=calcite-sheet&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/components/src/components/loader/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.scss?tag=calcite-loader&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/openCloseComponent.ts","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/scrim.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/scrim/scrim.scss?tag=calcite-scrim&encapsulation=shadow"],"sourcesContent":["export const CSS = {\n  scrim: \"scrim\",\n  container: \"container\",\n  containerOpen: \"container--open\",\n  content: \"content\",\n  containerEmbedded: \"container--embedded\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { ensureId, focusFirstTabbable, getElementDir } from \"../../utils/dom\";\nimport {\n  activateFocusTrap,\n  connectFocusTrap,\n  deactivateFocusTrap,\n  FocusTrap,\n  FocusTrapComponent,\n  updateFocusTrapElements,\n} from \"../../utils/focusTrapComponent\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { LogicalFlowPosition, Scale } from \"../interfaces\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\nimport { CSS } from \"./resources\";\nimport { DisplayMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-sheet\",\n  styleUrl: \"sheet.scss\",\n  shadow: true,\n})\nexport class Sheet implements OpenCloseComponent, FocusTrapComponent, LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   *  Passes a function to run before the component closes.\n   *\n   * @returns {Promise<void>}\n   */\n  @Prop() beforeClose: (el: HTMLCalciteSheetElement) => Promise<void>;\n\n  /**\n   * Specifies the display mode - `\"float\"` (content is separated detached),\n   * or `\"overlay\"` (displays on top of center content).\n   */\n  @Prop({ reflect: true }) displayMode: DisplayMode = \"overlay\";\n\n  /**\n   * This internal property, managed by a containing calcite-shell, is used\n   * to inform the component if special configuration or styles are needed\n   *\n   * @internal\n   */\n  @Prop() embedded = false;\n\n  /** When `true`, disables the default close on escape behavior. */\n  @Prop({ reflect: true }) escapeDisabled = false;\n\n  /**\n   * When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component.\n   */\n  @Prop({ reflect: true }) heightScale: Scale = \"m\";\n\n  /**\n   * When `true`, prevents focus trapping.\n   */\n  @Prop({ reflect: true }) focusTrapDisabled = false;\n\n  @Watch(\"focusTrapDisabled\")\n  handleFocusTrapDisabled(focusTrapDisabled: boolean): void {\n    if (!this.open) {\n      return;\n    }\n\n    focusTrapDisabled ? deactivateFocusTrap(this) : activateFocusTrap(this);\n  }\n\n  /**\n   * Specifies the label of the component.\n   */\n  @Prop() label!: string;\n\n  /** When `true`, displays and positions the component.  */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  @Watch(\"open\")\n  toggleSheet(value: boolean): void {\n    if (this.ignoreOpenChange) {\n      return;\n    }\n\n    if (value) {\n      this.openSheet();\n    } else {\n      this.closeSheet();\n    }\n  }\n\n  @Watch(\"opened\")\n  handleOpenedChange(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /**\n   * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is .\n   *\n   * @internal.\n   */\n  @Prop({ mutable: true, reflect: true }) opened = false;\n\n  /** When `true`, disables the closing of the component when clicked outside. */\n  @Prop({ reflect: true }) outsideCloseDisabled = false;\n\n  /** Determines where the component will be positioned. */\n  @Prop({ reflect: true }) position: LogicalFlowPosition = \"inline-start\";\n\n  /**\n   * When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component.\n   */\n  @Prop({ reflect: true }) widthScale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    // when sheet initially renders, if active was set we need to open as watcher doesn't fire\n    if (this.open) {\n      requestAnimationFrame(() => this.openSheet());\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  connectedCallback(): void {\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n    connectFocusTrap(this);\n  }\n\n  disconnectedCallback(): void {\n    this.removeOverflowHiddenClass();\n    this.mutationObserver?.disconnect();\n    deactivateFocusTrap(this);\n    this.embedded = false;\n  }\n\n  render(): VNode {\n    const dir = getElementDir(this.el);\n    return (\n      <Host\n        aria-describedby={this.contentId}\n        aria-label={this.label}\n        aria-modal=\"true\"\n        role=\"dialog\"\n      >\n        <div\n          class={{\n            [CSS.container]: true,\n            [CSS.containerOpen]: this.opened,\n            [CSS.containerEmbedded]: this.embedded,\n            [CSS_UTILITY.rtl]: dir === \"rtl\",\n          }}\n        >\n          <calcite-scrim class={CSS.scrim} onClick={this.handleOutsideClose} />\n          <div\n            class={{\n              [CSS.content]: true,\n            }}\n            ref={this.setTransitionEl}\n          >\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties/ State\n  //\n  //--------------------------------------------------------------------------\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  focusTrap: FocusTrap;\n\n  @Element() el: HTMLCalciteSheetElement;\n\n  private contentId: string;\n\n  private initialOverflowCSS: string;\n\n  private ignoreOpenChange = false;\n\n  private mutationObserver: MutationObserver = createObserver(\"mutation\", () =>\n    this.handleMutationObserver(),\n  );\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"keydown\", { target: \"window\" })\n  handleEscape(event: KeyboardEvent): void {\n    if (this.open && !this.escapeDisabled && event.key === \"Escape\" && !event.defaultPrevented) {\n      this.open = false;\n      event.preventDefault();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteSheetBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteSheetClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteSheetBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteSheetOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's \"close\" button - the first focusable item.\n   *\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  /**\n   * Updates the element(s) that are used within the focus-trap of the component.\n   */\n  @Method()\n  async updateFocusTrapElements(): Promise<void> {\n    updateFocusTrapElements(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteSheetBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteSheetOpen.emit();\n    activateFocusTrap(this);\n  }\n\n  onBeforeClose(): void {\n    this.calciteSheetBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteSheetClose.emit();\n    deactivateFocusTrap(this);\n  }\n\n  private setTransitionEl = (el: HTMLDivElement): void => {\n    this.transitionEl = el;\n    this.contentId = ensureId(el);\n  };\n\n  private openEnd = (): void => {\n    this.setFocus();\n    this.el.removeEventListener(\"calciteSheetOpen\", this.openEnd);\n  };\n\n  private openSheet(): void {\n    this.el.addEventListener(\"calciteSheetOpen\", this.openEnd);\n    this.opened = true;\n    if (!this.embedded) {\n      this.initialOverflowCSS = document.documentElement.style.overflow;\n      // use an inline style instead of a utility class to avoid global class declarations.\n      document.documentElement.style.setProperty(\"overflow\", \"hidden\");\n    }\n  }\n\n  private handleOutsideClose = (): void => {\n    if (this.outsideCloseDisabled) {\n      return;\n    }\n\n    this.open = false;\n  };\n\n  private closeSheet = async (): Promise<void> => {\n    if (this.beforeClose) {\n      try {\n        await this.beforeClose(this.el);\n      } catch (_error) {\n        // close prevented\n        requestAnimationFrame(() => {\n          this.ignoreOpenChange = true;\n          this.open = true;\n          this.ignoreOpenChange = false;\n        });\n        return;\n      }\n    }\n\n    this.opened = false;\n    this.removeOverflowHiddenClass();\n  };\n\n  private removeOverflowHiddenClass(): void {\n    document.documentElement.style.setProperty(\"overflow\", this.initialOverflowCSS);\n  }\n\n  private handleMutationObserver(): void {\n    this.updateFocusTrapElements();\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-sheet-scrim-background: Specifies the background color of the sheet scrim.\n * @prop --calcite-sheet-width: When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component.\n * @prop --calcite-sheet-max-width: When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the maximum width of the component.\n * @prop --calcite-sheet-min-width: When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the minimum width of the component.\n * @prop --calcite-sheet-height:  When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component.\n * @prop --calcite-sheet-max-height:  When `position` is `\"block-start\"` or `\"block-end\"`, specifies the maximum height of the component.\n * @prop --calcite-sheet-min-height:  When `position` is `\"block-start\"` or `\"block-end\"`, specifies the minimum height of the component.\n *\n */\n\n:host {\n  @apply flex absolute z-overlay inset-0;\n  visibility: hidden !important;\n  // the sheet should always use a dark scrim, regardless of light / dark mode - matches value in global.scss\n  --calcite-sheet-scrim-background-internal: #{rgba($blk-240, 0.85)};\n  --calcite-scrim-shadow-block-start-internal: 0 4px 8px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -1px rgba(0, 0, 0, 0.04);\n  --calcite-scrim-shadow-block-end-internal: 0 -4px 8px -1px rgba(0, 0, 0, 0.08), 0 -2px 4px -1px rgba(0, 0, 0, 0.04);\n  --calcite-scrim-shadow-inline-start-internal: 4px 0 8px -1px rgba(0, 0, 0, 0.08), 2px 0 4px -1px rgba(0, 0, 0, 0.04);\n  --calcite-scrim-shadow-inline-end-internal: -4px 0 8px -1px rgba(0, 0, 0, 0.08), -2px 0 4px -1px rgba(0, 0, 0, 0.04);\n}\n\n.calcite--rtl {\n  --calcite-scrim-shadow-inline-start-internal: -4px 0 8px -1px rgba(0, 0, 0, 0.08), -2px 0 4px -1px rgba(0, 0, 0, 0.04);\n  --calcite-scrim-shadow-inline-end-internal: 4px 0 8px -1px rgba(0, 0, 0, 0.08), 2px 0 4px -1px rgba(0, 0, 0, 0.04);\n}\n\n.container {\n  @apply text-color-2\n    fixed\n    flex\n    overflow-y-hidden\n    opacity-0\n    z-overlay\n    invisible;\n  transition:\n    visibility 0ms linear var(--calcite-internal-animation-timing-medium),\n    opacity var(--calcite-internal-animation-timing-medium) $easing-function;\n}\n\n:host([position=\"inline-start\"]) .container {\n  @apply justify-start;\n  inset-block: 0;\n  inset-inline: 0 auto;\n  --calcite-sheet-hidden-position-internal: translate3d(-1rem, 0, 0);\n}\n\n:host([position=\"inline-end\"]) .container {\n  @apply justify-end;\n  inset-block: 0;\n  inset-inline: auto 0;\n  --calcite-sheet-hidden-position-internal: translate3d(1rem, 0, 0);\n}\n\n:host([position=\"block-start\"]) .container {\n  @apply items-start;\n  inset-block: 0 auto;\n  inset-inline: 0;\n  --calcite-sheet-hidden-position-internal: translate3d(0, -1rem, 0);\n}\n\n:host([position=\"block-end\"]) .container {\n  @apply items-end;\n  inset-block: auto 0;\n  inset-inline: 0;\n  --calcite-sheet-hidden-position-internal: translate3d(0, 1rem, 0);\n}\n\n:host([display-mode=\"float\"]) .content {\n  @apply shadow-2-sm;\n}\n\n:host([display-mode=\"overlay\"][position=\"inline-start\"]) .container {\n  box-shadow: var(--calcite-scrim-shadow-inline-start-internal);\n}\n\n:host([display-mode=\"overlay\"][position=\"inline-end\"]) .container {\n  box-shadow: var(--calcite-scrim-shadow-inline-end-internal);\n}\n\n:host([display-mode=\"overlay\"][position=\"block-start\"]) .container {\n  box-shadow: var(--calcite-scrim-shadow-block-start-internal);\n}\n\n:host([display-mode=\"overlay\"][position=\"block-end\"]) .container {\n  box-shadow: var(--calcite-scrim-shadow-block-end-internal);\n}\n\n:host([position^=\"inline\"]) .container,\n:host([position^=\"inline\"]) .content {\n  inline-size: var(--calcite-sheet-width-internal);\n  max-inline-size: var(--calcite-sheet-max-width-internal);\n  min-inline-size: var(--calcite-sheet-min-width-internal);\n}\n\n:host([position^=\"block\"]) .container,\n:host([position^=\"block\"]) .content {\n  block-size: var(--calcite-sheet-height-internal);\n  max-block-size: var(--calcite-sheet-max-height-internal);\n  min-block-size: var(--calcite-sheet-min-height-internal);\n}\n\n:host([display-mode=\"float\"][position^=\"inline\"]) .container {\n  block-size: calc(100% - 1.5rem);\n  max-block-size: calc(100% - 1.5rem);\n  min-block-size: calc(100% - 1.5rem);\n}\n:host([display-mode=\"float\"][position^=\"block\"]) .container {\n  inline-size: calc(100% - 1.5rem);\n  max-inline-size: calc(100% - 1.5rem);\n  min-inline-size: calc(100% - 1.5rem);\n}\n\n:host([position^=\"inline\"][width-scale=\"s\"]) {\n  --calcite-sheet-width-internal: var(--calcite-sheet-width, 15vw);\n  --calcite-sheet-max-width-internal: var(--calcite-sheet-max-width, 360px);\n  --calcite-sheet-min-width-internal: var(--calcite-sheet-min-width, 260px);\n}\n\n:host([position^=\"inline\"][width-scale=\"m\"]) {\n  --calcite-sheet-width-internal: var(--calcite-sheet-width, 25vw);\n  --calcite-sheet-max-width-internal: var(--calcite-sheet-max-width, 420px);\n  --calcite-sheet-min-width-internal: var(--calcite-sheet-min-width, 300px);\n}\n\n:host([position^=\"inline\"][width-scale=\"l\"]) {\n  --calcite-sheet-width-internal: var(--calcite-sheet-width, 45vw);\n  --calcite-sheet-max-width-internal: var(--calcite-sheet-max-width, 680px);\n  --calcite-sheet-min-width-internal: var(--calcite-sheet-min-width, 340px);\n}\n\n:host([position^=\"block\"][height-scale=\"s\"]) {\n  --calcite-sheet-min-height-internal: var(--calcite-sheet-min-height, 160px);\n  --calcite-sheet-height-internal: var(--calcite-sheet-height, 30vh);\n  --calcite-sheet-max-height-internal: var(--calcite-sheet-max-height, 30vh);\n}\n\n:host([position^=\"block\"][height-scale=\"m\"]) {\n  --calcite-sheet-min-height-internal: var(--calcite-sheet-min-height, 200px);\n  --calcite-sheet-height-internal: var(--calcite-sheet-height, 45vh);\n  --calcite-sheet-max-height-internal: var(--calcite-sheet-max-height, 50vh);\n}\n\n:host([position^=\"block\"][height-scale=\"l\"]) {\n  --calcite-sheet-min-height-internal: var(--calcite-sheet-min-height, 240px);\n  --calcite-sheet-height-internal: var(--calcite-sheet-height, 60vh);\n  --calcite-sheet-max-height-internal: var(--calcite-sheet-max-height, 70vh);\n}\n\n.scrim {\n  --calcite-scrim-background: var(--calcite-sheet-scrim-background, var(--calcite-sheet-scrim-background-internal));\n  @apply fixed inset-0 flex overflow-y-hidden;\n}\n\n:host([opened]) {\n  visibility: visible !important;\n}\n\n.content {\n  @apply relative box-border block p-0 z-modal max-h-full max-w-full overflow-y-hidden;\n  background-color: theme(\"colors.background.foreground.1\");\n  max-block-size: 100%;\n  visibility: hidden;\n  transition:\n    transform var(--calcite-internal-animation-timing-medium) $easing-function,\n    visibility 0ms linear var(--calcite-internal-animation-timing-medium),\n    opacity var(--calcite-internal-animation-timing-medium) $easing-function;\n  transform: var(--calcite-sheet-hidden-position-internal);\n}\n\n.container--open .content {\n  transform: translate3d(0, 0, 0);\n}\n\n:host([display-mode=\"float\"]) .content,\n:host([display-mode=\"float\"]) .container {\n  @apply rounded;\n}\n\n:host([display-mode=\"float\"]) .container {\n  @apply p-3;\n}\n\n.container--open {\n  @apply opacity-100 visible;\n  transition-delay: 0ms;\n  .content {\n    @apply pointer-events-auto visible opacity-100;\n    transition:\n      transform var(--calcite-internal-animation-timing-medium) $easing-function,\n      visibility 0ms linear,\n      opacity var(--calcite-internal-animation-timing-medium) $easing-function,\n      max-inline-size var(--calcite-internal-animation-timing-medium) $easing-function,\n      max-block-size var(--calcite-internal-animation-timing-medium) $easing-function;\n    transition-delay: 0ms;\n  }\n}\n\n:host([position=\"inline-start\"]) .content,\n:host([position=\"inline-end\"]) .content {\n  @apply h-full;\n}\n\n:host([position=\"block-start\"]) .content,\n:host([position=\"block-end\"]) .content {\n  @apply w-full;\n}\n\n/**\n * Conditional styles for when Sheet is slotted in Shell\n */\n:host([position]) .container--embedded {\n  @apply absolute pointer-events-auto;\n  inline-size: 100%;\n  max-inline-size: 100%;\n  min-inline-size: 100%;\n  block-size: 100%;\n  max-block-size: 100%;\n  min-block-size: 100%;\n  calcite-scrim {\n    @apply absolute;\n  }\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","export const CSS = {\n  loader: \"loader\",\n  loaderParts: \"loader__svgs\",\n  loaderPart: \"loader__svg\",\n  loaderPartId: (partId: number) => `${CSS.loaderPart}--${partId}` as const,\n  loaderText: \"loader__text\",\n  loaderPercentage: \"loader__percentage\",\n};\n","import { Component, Element, h, Host, Prop, VNode } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-loader\",\n  styleUrl: \"loader.scss\",\n  shadow: true,\n})\nexport class Loader {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, displays smaller and appears to the left of the text. */\n  @Prop({ reflect: true }) inline = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\";\n\n  /** The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100. */\n  @Prop() value = 0;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text = \"\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el, inline, label, scale, text, type, value } = this;\n\n    const id = el.id || guid();\n    const radiusRatio = 0.45;\n    const size = inline ? this.getInlineSize(scale) : this.getSize(scale);\n    const radius = size * radiusRatio;\n    const viewbox = `0 0 ${size} ${size}`;\n    const isDeterminate = type === \"determinate\";\n    const circumference = 2 * radius * Math.PI;\n    const progress = (value / 100) * circumference;\n    const remaining = circumference - progress;\n    const valueNow = Math.floor(value);\n    const hostAttributes = {\n      \"aria-valuenow\": valueNow,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      complete: valueNow === 100,\n    };\n    const svgAttributes = { r: radius, cx: size / 2, cy: size / 2 };\n    const determinateStyle = { \"stroke-dasharray\": `${progress} ${remaining}` };\n    return (\n      <Host\n        aria-label={label}\n        id={id}\n        role=\"progressbar\"\n        {...(isDeterminate ? hostAttributes : {})}\n      >\n        <div class={CSS.loaderParts}>\n          {[1, 2, 3].map((index) => (\n            <svg\n              aria-hidden=\"true\"\n              class={{\n                [CSS.loaderPart]: true,\n                [CSS.loaderPartId(index)]: true,\n              }}\n              key={index}\n              viewBox={viewbox}\n              {...(index === 3 && isDeterminate ? { style: determinateStyle } : {})}\n            >\n              <circle {...svgAttributes} />\n            </svg>\n          ))}\n        </div>\n        {text && <div class={CSS.loaderText}>{text}</div>}\n        {isDeterminate && <div class={CSS.loaderPercentage}>{value}</div>}\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteLoaderElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Return the proper sizes based on the scale property\n   *\n   * @param scale\n   */\n  private getSize(scale: string) {\n    return {\n      s: 32,\n      m: 56,\n      l: 80,\n    }[scale];\n  }\n\n  private getInlineSize(scale: string) {\n    return {\n      s: 12,\n      m: 16,\n      l: 20,\n    }[scale];\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-loader-font-size: Specifies the font size of the loading percentage when type is `\"determinate\"`.\n * @prop --calcite-loader-size: The width and height of a non-inline loader.\n * @prop --calcite-loader-size-inline: The width and height of an inline loader\n * @prop --calcite-loader-padding : Specifies the padding of the loader.\n */\n\n@import \"../../assets/styles/animation\";\n\n$stroke-width: 3;\n$loader-scale: 54;\n$loader-circumference: ($loader-scale - (2 * $stroke-width)) * 3.14159;\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --calcite-internal-duration-factor: 0;\n  }\n}\n\n:host {\n  @apply relative mx-auto hidden items-center justify-center opacity-100;\n  min-block-size: var(--calcite-loader-size);\n  font-size: var(--calcite-loader-font-size);\n  stroke: var(--calcite-color-brand);\n  stroke-width: $stroke-width;\n  fill: none;\n  transform: scale(1, 1);\n  animation: loader-color-shift scaleDuration(--calcite-internal-animation-timing-slow, 2) alternate-reverse infinite\n    linear;\n  padding-block: var(--calcite-loader-padding, theme(\"spacing.16\"));\n  will-change: contents;\n}\n\n:host([scale=\"s\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.n2\");\n  --calcite-loader-size: theme(\"spacing.8\");\n  --calcite-loader-size-inline: theme(\"spacing.3\");\n}\n\n:host([scale=\"m\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.0\");\n  --calcite-loader-size: theme(\"spacing.16\");\n  --calcite-loader-size-inline: theme(\"spacing.4\");\n}\n\n:host([scale=\"l\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.2\");\n  --calcite-loader-size: theme(\"spacing.24\");\n  --calcite-loader-size-inline: theme(\"spacing.6\");\n}\n\n:host([no-padding]) {\n  @apply py-0;\n}\n\n:host {\n  @apply flex;\n}\n\n.loader__text {\n  @apply text-n2h\n  text-color-1\n  block\n  text-center;\n  margin-block-start: calc(var(--calcite-loader-size) + theme(\"spacing.6\"));\n}\n\n.loader__percentage {\n  @apply text-color-1 absolute block text-center;\n  font-size: var(--calcite-loader-font-size);\n  inline-size: var(--calcite-loader-size);\n  inset-inline-start: 50%;\n  margin-inline-start: calc(var(--calcite-loader-size) / 2 * -1);\n  line-height: 0.25;\n  transform: scale(1, 1);\n}\n\n.loader__svgs {\n  @apply absolute overflow-visible opacity-100;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  inset-inline-start: 50%;\n  margin-inline-start: calc(var(--calcite-loader-size) / 2 * -1);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-duration: scaleDuration(--calcite-internal-animation-timing-slow, 6.66);\n  animation-name: loader-clockwise;\n}\n\n.loader__svg {\n  @apply absolute top-0 origin-center overflow-visible;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n\n  &--1 {\n    animation-name: loader-offset-1;\n  }\n  &--2 {\n    animation-name: loader-offset-2;\n  }\n  &--3 {\n    animation-name: loader-offset-3;\n  }\n}\n\n:host([type=\"determinate\"]) {\n  @apply animate-none;\n  stroke: var(--calcite-color-border-3);\n  .loader__svgs {\n    @apply animate-none;\n  }\n  .loader__svg--3 {\n    @apply animate-none;\n    stroke: var(--calcite-color-brand);\n    stroke-dasharray: $loader-circumference;\n    transform: rotate(-90deg);\n    transition: all var(--calcite-internal-animation-timing-fast) linear;\n  }\n}\n\n:host([inline]) {\n  @apply relative m-0 animate-none stroke-current stroke-2 py-0;\n  block-size: var(--calcite-loader-size-inline);\n  min-block-size: var(--calcite-loader-size-inline);\n  inline-size: var(--calcite-loader-size-inline);\n  margin-inline-end: calc(var(--calcite-loader-size-inline) * 0.5);\n  vertical-align: calc(var(--calcite-loader-size-inline) * -1 * 0.2);\n}\n\n:host([inline]) .loader__svgs {\n  @apply top-0 m-0;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([inline]) .loader__svg {\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([complete]) {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity var(--calcite-internal-animation-timing-medium) linear 1000ms,\n    transform var(--calcite-internal-animation-timing-medium) linear 1000ms;\n}\n\n:host([complete]) .loader__svgs {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms,\n    transform calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms;\n}\n\n:host([complete]) .loader__percentage {\n  color: theme(\"colors.brand\");\n  transform: scale(1.05, 1.05);\n  transform-origin: center;\n  transition:\n    color var(--calcite-internal-animation-timing-medium) linear,\n    transform var(--calcite-internal-animation-timing-medium) linear;\n}\n\n/**\n  Segment variables\n  - i         index (1-3)\n  - size      length of the segment (0 - 100)\n  - growth    how much the segment grows during the animation\n              (size + growth should not exceed 100)\n  - duration  how long the segment takes to rotate 360° (seconds)\n*/\n@mixin generateSegment($i, $size, $growth, $duration) {\n  $circumference: calc($loader-circumference / $loader-scale) * 100;\n  $length: ($size * 0.01) * $circumference;\n  $end: $length + ($growth * 0.01) * $circumference;\n\n  .loader__svg--#{$i} {\n    stroke-dasharray: $length $circumference - $end;\n    animation-duration: $duration;\n  }\n  @keyframes loader-offset-#{$i} {\n    0% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: $end $circumference - $end;\n      stroke-dashoffset: -$circumference * 0.5 - ($length - $end) * 0.5;\n    }\n    100% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: -$circumference;\n    }\n  }\n}\n\n@include generateSegment(1, 10, 40, scaleDuration(--calcite-internal-animation-timing-slow, 4.8));\n@include generateSegment(2, 20, 30, scaleDuration(--calcite-internal-animation-timing-slow, 6.4));\n@include generateSegment(3, 05, 45, scaleDuration(--calcite-internal-animation-timing-slow, 7.734));\n\n@keyframes loader-color-shift {\n  0% {\n    stroke: var(--calcite-color-brand);\n  }\n  33% {\n    stroke: var(--calcite-color-brand-press);\n  }\n  66% {\n    stroke: var(--calcite-color-brand-hover);\n  }\n  100% {\n    stroke: var(--calcite-color-brand);\n  }\n}\n\n@keyframes loader-clockwise {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@include base-component();\n","import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n","export const CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\n\nexport const BREAKPOINTS = {\n  s: 72, // Less than 72px.\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n","import { Component, Element, h, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { slotChangeHasContent } from \"../../utils/dom\";\nimport { CSS, BREAKPOINTS } from \"./resources\";\nimport { ScrimMessages } from \"./assets/scrim/t9n\";\n\n/**\n * @slot - A slot for adding custom content, primarily loading information.\n */\n@Component({\n  tag: \"calcite-scrim\",\n  styleUrl: \"scrim.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Scrim implements LocalizedComponent, T9nComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ScrimMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ScrimMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteScrimElement;\n\n  resizeObserver = createObserver(\"resize\", () => this.handleResize());\n\n  loaderEl: HTMLCalciteLoaderElement;\n\n  @State() loaderScale: Scale;\n\n  @State() defaultMessages: ScrimMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() hasContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { hasContent, loading, messages } = this;\n\n    return (\n      <div class={CSS.scrim}>\n        {loading ? (\n          <calcite-loader\n            label={messages.loading}\n            ref={this.storeLoaderEl}\n            scale={this.loaderScale}\n          />\n        ) : null}\n        <div class={CSS.content} hidden={!hasContent}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private handleDefaultSlotChange = (event: Event): void => {\n    this.hasContent = slotChangeHasContent(event);\n  };\n\n  private storeLoaderEl = (el: HTMLCalciteLoaderElement): void => {\n    this.loaderEl = el;\n    this.handleResize();\n  };\n\n  private getScale(size: number): Scale {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    } else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    } else {\n      return \"m\";\n    }\n  }\n\n  private handleResize(): void {\n    const { loaderEl, el } = this;\n\n    if (!loaderEl) {\n      return;\n    }\n\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-scrim-background: Specifies the background color of the scrim.\n */\n:host {\n  --calcite-scrim-background: var(--calcite-color-transparent-scrim);\n}\n\n:host {\n  @apply absolute\n  inset-0\n  z-overlay\n  flex\n  h-full\n  w-full\n  flex-col\n  items-stretch;\n}\n\n@keyframes calcite-scrim-fade-in {\n  0% {\n    @apply bg-opacity-0;\n  }\n  100% {\n    @apply text-opacity-100;\n  }\n}\n\n.scrim {\n  @apply absolute\n  inset-0\n  flex\n  flex-col\n  content-center\n  items-center\n  justify-center\n  overflow-hidden;\n  animation: calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;\n  background-color: var(--calcite-scrim-background, var(--calcite-color-transparent-scrim));\n}\n\n.content {\n  @apply p-4;\n}\n\n@include base-component();\n"],"names":["CSS","Sheet","proxyCustomElement","HTMLElement","openTransitionProp","ignoreOpenChange","mutationObserver","createObserver","this","handleMutationObserver","setTransitionEl","el","transitionEl","contentId","ensureId","openEnd","setFocus","removeEventListener","handleOutsideClose","outsideCloseDisabled","open","closeSheet","async","beforeClose","_error","requestAnimationFrame","opened","removeOverflowHiddenClass","handleFocusTrapDisabled","focusTrapDisabled","deactivateFocusTrap","activateFocusTrap","toggleSheet","value","openSheet","handleOpenedChange","onToggleOpenCloseComponent","componentWillLoad","setUpLoadableComponent","componentDidLoad","setComponentLoaded","connectedCallback","_this$mutationObserve","observe","childList","subtree","connectFocusTrap","disconnectedCallback","_this$mutationObserve2","disconnect","embedded","render","dir","getElementDir","h","Host","key","label","role","class","CSS_UTILITY","rtl","onClick","ref","handleEscape","event","escapeDisabled","defaultPrevented","preventDefault","componentFocusable","focusFirstTabbable","updateFocusTrapElements","onBeforeOpen","calciteSheetBeforeOpen","emit","onOpen","calciteSheetOpen","onBeforeClose","calciteSheetBeforeClose","onClose","calciteSheetClose","addEventListener","initialOverflowCSS","document","documentElement","style","overflow","setProperty","resolveMap","WeakMap","promiseMap","component","set","Promise","resolve","get","componentLoaded","isBrowser","forceUpdate","loader","loaderParts","loaderPart","loaderPartId","partId","concat","loaderText","loaderPercentage","Loader","inline","scale","text","type","id","guid","size","getInlineSize","getSize","radius","viewbox","isDeterminate","circumference","Math","PI","progress","remaining","valueNow","floor","hostAttributes","complete","svgAttributes","r","cx","cy","determinateStyle","map","index","viewBox","s","m","l","internalReadTask","readTask","isOpen","whenTransitionDone","BREAKPOINTS","Scrim","resizeObserver","handleResize","handleDefaultSlotChange","hasContent","slotChangeHasContent","storeLoaderEl","loaderEl","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","_this$resizeObserver","connectLocalized","connectMessages","setUpMessages","_this$resizeObserver2","disconnectLocalized","disconnectMessages","loading","messages","loaderScale","hidden","onSlotchange","getScale","_Math$min","min","clientHeight","clientWidth"],"sourceRoot":""}