{"version":3,"file":"static/js/2654.061fcdda.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/FloatingArrow.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/functional/Heading.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/popover/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/popover/popover.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/popover/PopoverManager.ts","../node_modules/@esri/calcite-components/dist/components/src/components/popover/popover.scss?tag=calcite-popover&encapsulation=shadow"],"sourcesContent":["import { FunctionalComponent, h } from \"@stencil/core\";\nimport { JSXAttributes } from \"@stencil/core/internal\";\nimport { FloatingLayout } from \"../../utils/floating-ui\";\n\ninterface FloatingArrowProps extends JSXAttributes {\n  floatingLayout: FloatingLayout;\n}\n\nconst CSS = {\n  arrow: \"calcite-floating-ui-arrow\",\n  arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\n\nconst DEFAULTS = {\n  width: 12,\n  height: 6,\n  strokeWidth: 1,\n};\n\n/**\n * Renders a SVG element to be used as a floating-ui arrow.\n *\n * This functional component should be rendered inside a `FloatingUIComponent` when it needs an arrow element.\n *\n * @param floatingLayout.floatingLayout\n * @param floatingLayout â€“ The effective floating layout to render the arrow vertically or horizontally. Possible values: `vertical` or `horizontal`.\n *\n * See [floating-ui](https://github.com/Esri/calcite-design-system/blob/dev/src/utils/floating-ui.ts)\n * @param floatingLayout.key\n * @param floatingLayout.ref\n */\nexport const FloatingArrow: FunctionalComponent<FloatingArrowProps> = ({\n  floatingLayout,\n  key,\n  ref,\n}) => {\n  const { width, height, strokeWidth } = DEFAULTS;\n  const svgX = width / 2;\n  const isVertical = floatingLayout === \"vertical\";\n\n  const dValue =\n    \"M0,0\" +\n    ` H${width}` +\n    ` L${width - svgX},${height}` +\n    ` Q${svgX},${height} ${svgX},${height}` +\n    \" Z\";\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      class={CSS.arrow}\n      height={width}\n      key={key}\n      ref={ref}\n      viewBox={`0 0 ${width} ${width + (!isVertical ? strokeWidth : 0)}`}\n      width={width + (isVertical ? strokeWidth : 0)}\n    >\n      {strokeWidth > 0 && (\n        <path\n          class={CSS.arrowStroke}\n          d={dValue}\n          fill=\"none\"\n          // Account for the stroke on the fill path rendered below.\n          stroke-width={strokeWidth + 1}\n        />\n      )}\n      {/* In Firefox, for left/right placements there's a ~0.5px gap where the\n  border can show through. Adding a stroke on the fill removes it. */}\n      <path d={dValue} stroke=\"none\" />\n    </svg>\n  );\n};\n","import { FunctionalComponent, h } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\n\nexport type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeadingProps extends JSXBase.HTMLAttributes {\n  level?: HeadingLevel;\n}\n\nexport function constrainHeadingLevel(level: number): HeadingLevel {\n  return Math.min(Math.max(Math.ceil(level), 1), 6) as HeadingLevel;\n}\n\nexport const Heading: FunctionalComponent<HeadingProps> = (props, children) => {\n  const HeadingTag = props.level ? `h${props.level}` : \"div\";\n\n  delete props.level;\n\n  return <HeadingTag {...props}>{children}</HeadingTag>;\n};\n","export const CSS = {\n  container: \"container\",\n  imageContainer: \"image-container\",\n  closeButtonContainer: \"close-button-container\",\n  closeButton: \"close-button\",\n  content: \"content\",\n  hasHeader: \"has-header\",\n  header: \"header\",\n  headerContent: \"header-content\",\n  heading: \"heading\",\n};\n\nexport const defaultPopoverPlacement = \"auto\";\nexport const ARIA_CONTROLS = \"aria-controls\";\nexport const ARIA_EXPANDED = \"aria-expanded\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  filterValidFlipPlacements,\n  FlipPlacement,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport {\n  activateFocusTrap,\n  connectFocusTrap,\n  deactivateFocusTrap,\n  FocusTrap,\n  FocusTrapComponent,\n  updateFocusTrapElements,\n} from \"../../utils/focusTrapComponent\";\nimport { focusFirstTabbable, queryElementRoots, toAriaBoolean } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { Heading, HeadingLevel } from \"../functional/Heading\";\nimport { Scale } from \"../interfaces\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\nimport { getIconScale } from \"../../utils/component\";\nimport PopoverManager from \"./PopoverManager\";\nimport { PopoverMessages } from \"./assets/popover/t9n\";\nimport { ARIA_CONTROLS, ARIA_EXPANDED, CSS, defaultPopoverPlacement } from \"./resources\";\n\nconst manager = new PopoverManager();\n\n/**\n * @slot - A slot for adding custom content.\n */\n@Component({\n  tag: \"calcite-popover\",\n  styleUrl: \"popover.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Popover\n  implements\n    FloatingUIComponent,\n    OpenCloseComponent,\n    FocusTrapComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.\n   */\n  @Prop({ reflect: true }) autoClose = false;\n\n  /** When `true`, displays a close button within the component. */\n  @Prop({ reflect: true }) closable = false;\n\n  /**\n   * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.\n   */\n  @Prop({ reflect: true }) flipDisabled = false;\n\n  /**\n   * When `true`, prevents focus trapping.\n   */\n  @Prop({ reflect: true }) focusTrapDisabled = false;\n\n  @Watch(\"focusTrapDisabled\")\n  handleFocusTrapDisabled(focusTrapDisabled: boolean): void {\n    if (!this.open) {\n      return;\n    }\n\n    focusTrapDisabled ? deactivateFocusTrap(this) : activateFocusTrap(this);\n  }\n\n  /**\n   * When `true`, removes the caret pointer.\n   */\n  @Prop({ reflect: true }) pointerDisabled = false;\n\n  /**\n   * Defines the available placements that can be used when a flip occurs.\n   */\n  @Prop() flipPlacements: FlipPlacement[];\n\n  @Watch(\"flipPlacements\")\n  flipPlacementsHandler(): void {\n    this.setFilteredPlacements();\n    this.reposition(true);\n  }\n\n  /**\n   * The component header text.\n   */\n  @Prop() heading: string;\n\n  /**\n   * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.\n   */\n  @Prop({ reflect: true }) headingLevel: HeadingLevel;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<PopoverMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: PopoverMessages;\n\n  /**\n   * Offsets the position of the popover away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offsets the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, displays and positions the component.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n    this.setExpandedAttr();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = defaultPopoverPlacement;\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   *  The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.\n   */\n  @Prop() referenceElement!: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n    this.reposition(true);\n  }\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.\n   *\n   * This property can be set to `true` to manage when the component is open.\n   */\n  @Prop({ reflect: true }) triggerDisabled = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalcitePopoverElement;\n\n  mutationObserver: MutationObserver = createObserver(\"mutation\", () =>\n    this.updateFocusTrapElements(),\n  );\n\n  filteredFlipPlacements: FlipPlacement[];\n\n  @State() effectiveLocale = \"\";\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() defaultMessages: PopoverMessages;\n\n  arrowEl: SVGElement;\n\n  closeButtonEl: HTMLCalciteActionElement;\n\n  guid = `calcite-popover-${guid()}`;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  hasLoaded = false;\n\n  focusTrap: FocusTrap;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setFilteredPlacements();\n    connectLocalized(this);\n    connectMessages(this);\n    connectFocusTrap(this);\n\n    // we set up the ref element in the next frame to ensure PopoverManager\n    // event handlers are invoked after connect (mainly for `components` output target)\n    requestAnimationFrame(() => this.setUpReferenceElement(this.hasLoaded));\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n    deactivateFocusTrap(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calcitePopoverBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calcitePopoverClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calcitePopoverBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calcitePopoverOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      flipDisabled,\n      filteredFlipPlacements,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        flipDisabled,\n        flipPlacements: filteredFlipPlacements,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"popover\",\n      },\n      delayed,\n    );\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    forceUpdate(this.el);\n    focusFirstTabbable(this.el);\n  }\n\n  /**\n   * Updates the element(s) that are used within the focus-trap of the component.\n   */\n  @Method()\n  async updateFocusTrapElements(): Promise<void> {\n    updateFocusTrapElements(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private setTransitionEl = (el: HTMLDivElement): void => {\n    this.transitionEl = el;\n  };\n\n  setFilteredPlacements = (): void => {\n    const { el, flipPlacements } = this;\n\n    this.filteredFlipPlacements = flipPlacements\n      ? filterValidFlipPlacements(flipPlacements, el)\n      : null;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = this.getReferenceElement();\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  setExpandedAttr = (): void => {\n    const { effectiveReferenceElement, open } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_EXPANDED, toAriaBoolean(open));\n    }\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_CONTROLS, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n    this.setExpandedAttr();\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_CONTROLS);\n      effectiveReferenceElement.removeAttribute(ARIA_EXPANDED);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  getReferenceElement(): ReferenceElement {\n    const { referenceElement, el } = this;\n\n    return (\n      (typeof referenceElement === \"string\"\n        ? queryElementRoots(el, { id: referenceElement })\n        : referenceElement) || null\n    );\n  }\n\n  hide = (): void => {\n    this.open = false;\n  };\n\n  onBeforeOpen(): void {\n    this.calcitePopoverBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calcitePopoverOpen.emit();\n    activateFocusTrap(this);\n  }\n\n  onBeforeClose(): void {\n    this.calcitePopoverBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calcitePopoverClose.emit();\n    deactivateFocusTrap(this);\n  }\n\n  storeArrowEl = (el: SVGElement): void => {\n    this.arrowEl = el;\n    this.reposition(true);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderCloseButton(): VNode {\n    const { messages, closable } = this;\n    return closable ? (\n      <div class={CSS.closeButtonContainer} key={CSS.closeButtonContainer}>\n        <calcite-action\n          appearance=\"transparent\"\n          class={CSS.closeButton}\n          onClick={this.hide}\n          ref={(closeButtonEl) => (this.closeButtonEl = closeButtonEl)}\n          scale={this.scale}\n          text={messages.close}\n        >\n          <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n        </calcite-action>\n      </div>\n    ) : null;\n  }\n\n  renderHeader(): VNode {\n    const { heading, headingLevel } = this;\n    const headingNode = heading ? (\n      <Heading class={CSS.heading} level={headingLevel}>\n        {heading}\n      </Heading>\n    ) : null;\n\n    return headingNode ? (\n      <div class={CSS.header} key={CSS.header}>\n        {headingNode}\n        {this.renderCloseButton()}\n      </div>\n    ) : null;\n  }\n\n  render(): VNode {\n    const { effectiveReferenceElement, heading, label, open, pointerDisabled, floatingLayout } =\n      this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n    const arrowNode = !pointerDisabled ? (\n      <FloatingArrow floatingLayout={floatingLayout} key=\"floating-arrow\" ref={this.storeArrowEl} />\n    ) : null;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"dialog\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          ref={this.setTransitionEl}\n        >\n          {arrowNode}\n          <div\n            class={{\n              [CSS.hasHeader]: !!heading,\n              [CSS.container]: true,\n            }}\n          >\n            {this.renderHeader()}\n            <div class={CSS.content}>\n              <slot />\n            </div>\n            {!heading ? this.renderCloseButton() : null}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { isKeyboardTriggeredClick } from \"../../utils/dom\";\n\nexport default class PopoverManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new Map<ReferenceElement, HTMLCalcitePopoverElement>();\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, popover: HTMLCalcitePopoverElement): void {\n    this.registeredElementCount++;\n\n    this.registeredElements.set(referenceEl, popover);\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryPopover = (composedPath: EventTarget[]): HTMLCalcitePopoverElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private togglePopovers = (event: KeyboardEvent | PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const togglePopover = this.queryPopover(composedPath);\n\n    if (togglePopover && !togglePopover.triggerDisabled) {\n      togglePopover.open = !togglePopover.open;\n    }\n\n    Array.from(this.registeredElements.values())\n      .filter(\n        (popover) => popover !== togglePopover && popover.autoClose && popover.open && !composedPath.includes(popover),\n      )\n      .forEach((popover) => (popover.open = false));\n  };\n\n  private closeAllPopovers(): void {\n    Array.from(this.registeredElements.values()).forEach((popover) => (popover.open = false));\n  }\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === \"Escape\") {\n      this.closeAllPopovers();\n    } else if (isActivationKey(event.key)) {\n      this.togglePopovers(event);\n    }\n  };\n\n  private clickHandler = (event: PointerEvent): void => {\n    if (isKeyboardTriggeredClick(event)) {\n      return;\n    }\n\n    this.togglePopovers(event);\n  };\n\n  private addListeners(): void {\n    window.addEventListener(\"click\", this.clickHandler);\n    window.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"click\", this.clickHandler);\n    window.removeEventListener(\"keydown\", this.keyDownHandler);\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-popover-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-popover-z-index, theme(\"zIndex.popover\"));\n}\n\n@include floatingUIHost();\n@include floatingUIArrow();\n\n:host([scale=\"s\"]) {\n  .heading {\n    @apply text-n1-wrap\n    px-3\n    py-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  .heading {\n    @apply text-0-wrap\n    px-4\n    py-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .heading {\n    @apply text-1-wrap\n    px-5\n    py-4;\n  }\n}\n\n:host {\n  @apply pointer-events-none;\n}\n\n:host([open]) {\n  pointer-events: initial;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n.header {\n  @apply border-b-color-3\n    flex\n    flex-auto\n    items-stretch\n    justify-start\n    border-0\n    border-b\n    border-solid;\n}\n\n.heading {\n  @apply text-color-1\n  word-break\n  m-0\n  block\n  flex-auto\n  self-center\n  whitespace-normal\n  font-medium;\n}\n\n.container {\n  @apply text-color-1\n    relative\n    flex\n    h-full\n    flex-row\n    flex-nowrap\n    rounded;\n  &.has-header {\n    @apply flex-col;\n  }\n}\n\n.content {\n  @apply word-break\n  flex\n  h-full\n  w-full\n  flex-col\n  flex-nowrap\n  self-center;\n}\n\n.close-button-container {\n  @apply flex overflow-hidden;\n  flex: 0 0 auto;\n  border-start-end-radius: theme(\"borderRadius.DEFAULT\");\n  border-end-end-radius: theme(\"borderRadius.DEFAULT\");\n}\n\n.has-header .close-button-container {\n  border-end-end-radius: none;\n}\n\n::slotted(calcite-panel),\n::slotted(calcite-flow) {\n  @apply h-full;\n}\n\n@include base-component();\n"],"names":["CSS","DEFAULTS","width","height","strokeWidth","FloatingArrow","_ref","floatingLayout","key","ref","svgX","isVertical","dValue","concat","h","class","viewBox","d","fill","stroke","Heading","props","children","HeadingTag","level","ARIA_CONTROLS","ARIA_EXPANDED","manager","constructor","registeredElements","Map","registeredElementCount","queryPopover","composedPath","this","registeredElement","find","pathEl","has","get","togglePopovers","event","togglePopover","triggerDisabled","open","Array","from","values","filter","popover","autoClose","includes","forEach","keyDownHandler","defaultPrevented","closeAllPopovers","isActivationKey","clickHandler","isKeyboardTriggeredClick","registerElement","referenceEl","set","addListeners","unregisterElement","delete","removeListeners","window","addEventListener","removeEventListener","Popover","proxyCustomElement","HTMLElement","mutationObserver","createObserver","updateFocusTrapElements","guid","openTransitionProp","hasLoaded","setTransitionEl","el","transitionEl","setFilteredPlacements","flipPlacements","filteredFlipPlacements","filterValidFlipPlacements","setUpReferenceElement","warn","arguments","length","undefined","_this","removeReferences","effectiveReferenceElement","getReferenceElement","connectFloatingUI","referenceElement","console","tagName","addReferences","getId","id","setExpandedAttr","setAttribute","toAriaBoolean","removeAttribute","hide","storeArrowEl","arrowEl","reposition","defaultOffsetDistance","handleFocusTrapDisabled","focusTrapDisabled","deactivateFocusTrap","activateFocusTrap","flipPlacementsHandler","onMessagesChange","offsetDistanceOffsetHandler","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","connectFocusTrap","requestAnimationFrame","componentWillLoad","setUpMessages","setUpLoadableComponent","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectFloatingUI","delayed","placement","overlayPositioning","flipDisabled","offsetDistance","offsetSkidding","floatingEl","type","setFocus","componentFocusable","forceUpdate","focusFirstTabbable","queryElementRoots","onBeforeOpen","calcitePopoverBeforeOpen","emit","onOpen","calcitePopoverOpen","onBeforeClose","calcitePopoverBeforeClose","onClose","calcitePopoverClose","renderCloseButton","messages","closable","appearance","onClick","closeButtonEl","scale","text","close","icon","getIconScale","renderHeader","heading","headingLevel","headingNode","render","label","pointerDisabled","displayed","hidden","arrowNode","Host","role","FloatingCSS","animation","animationActive"],"sourceRoot":""}